import { Telegraf } from 'telegraf';
import { Scenes } from 'telegraf';
import { InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram';
import { ExtraReplyMessage } from 'telegraf/typings/telegram-types';
import { TelegrafContext } from './interfaces/telegraf-context.interface';
import { ProgressEntity } from './user/entities/progress.entity';
import { UsersEntity } from './user/entities/users.entity';
import { ChaptersEntity } from './user/entities/chapters.entity';
import { ChoicesEntity } from './user/entities/choices.entity';
import { LocationsEntity } from './user/entities/locations.entity';
import { Repository } from 'typeorm';
import { PlayerDataDto } from './common/player-data.dto';
import { RoadsEntity } from './user/entities/roads.entity';
export declare class AppService {
    private bot;
    private readonly usersRepository;
    private readonly chaptersRepository;
    private readonly choicesRepository;
    private readonly progressRepository;
    private readonly roadsRepository;
    private readonly locationsRepository;
    private readonly algorithm;
    private readonly secretKey;
    private readonly commandList;
    constructor(bot: Telegraf<Scenes.SceneContext>, usersRepository: Repository<UsersEntity>, chaptersRepository: Repository<ChaptersEntity>, choicesRepository: Repository<ChoicesEntity>, progressRepository: Repository<ProgressEntity>, roadsRepository: Repository<RoadsEntity>, locationsRepository: Repository<LocationsEntity>);
    encrypt(text: any): {
        iv: string;
        content: string;
    };
    updateStorePlayerLocation(ctx: TelegrafContext, playerLocation: UsersEntity): Promise<any>;
    updateStorePlayerProgress(ctx: TelegrafContext, playerProgress: ProgressEntity): Promise<any>;
    connectPlayerMonitor(): Promise<void>;
    getLocation(location: string): Promise<LocationsEntity>;
    getChapterByCode(code: string): Promise<ChaptersEntity>;
    getRoadList(location: string): Promise<RoadsEntity[]>;
    getChoiceList(code: string): Promise<ChoicesEntity[]>;
    getStorePlayerData(ctx: TelegrafContext): Promise<PlayerDataDto>;
    getNextChapter(playerData: PlayerDataDto): Promise<ChaptersEntity>;
    getGoalChapter(playerData: PlayerDataDto): Promise<ChaptersEntity>;
    getCurrentChapter(playerData: PlayerDataDto): Promise<ChaptersEntity>;
    clearMenuCommands(messageText: string, chatId: number, messageId: number): Promise<void>;
    registerNewPlayer(ctx: TelegrafContext): Promise<PlayerDataDto>;
    decrypt(hash: any): string;
    commandListInit(): Promise<void>;
    escapeText(escapedMsg: string): string;
    updateDisplay(progress: ProgressEntity, keyboard: InlineKeyboardMarkup, caption?: string, photoLink?: string): Promise<void>;
    getTelegramId(ctx: TelegrafContext): number;
    sleep(ms: any): Promise<unknown>;
    getRandomElInArr(arr: any[]): any;
    menuSplitter(arr: any, cols: any): any[];
    sendMessageByTelegramId(telegramId: number, message: string, extra?: ExtraReplyMessage): Promise<import("typegram/message").Message.TextMessage>;
}
