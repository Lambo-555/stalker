async function onSceneEnter() {
    var _a;
    let enemies = generateRandomEnemies();
    let log = `–í–∞–º –Ω–∞ –ø—É—Ç–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –±–∞–Ω–¥–∏—Ç—ã. –ù–∞—á–∞–ª–∞—Å—å –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∞. –í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –≤—Ä–∞–≥–æ–≤: ${enemies
        .map((item) => item.name)
        .join(', ')}.\n`;
    let battle = null;
    let damageToPlayer = 0;
    while (enemies.length !== 0) {
        battle = buttlePart(enemies, damageToPlayer);
        if (!(battle === null || battle === void 0 ? void 0 : battle.isAlive)) {
            log += battle.logs;
            return log;
        }
        if (((_a = battle === null || battle === void 0 ? void 0 : battle.enemyList) === null || _a === void 0 ? void 0 : _a.length) >= 1) {
            damageToPlayer = battle.damageToPlayer;
            enemies = battle === null || battle === void 0 ? void 0 : battle.enemyList;
        }
        log += battle.logs;
    }
    return log;
}
function generateRandomEnemies() {
    const names = [
        '–í–∞—Å—è–Ω',
        '–ñ–æ—Ä–∞',
        '–ë–æ—Ä—è–Ω',
        '–ö–æ–ª—è–Ω',
        '–°—Ç–∞—Å–∏–∫',
        '–ü–µ—Ç—Ä–æ—Å',
        '–†–æ–±–µ—Ä—Ç',
        '–ê–Ω–¥—Ä—é—Ö–∞',
        '–ê—Å—Ç–∏',
        '–ú–∞–∫—Å–æ–Ω',
        '–ú–∞–∫—Å–∞–Ω',
        '–î–µ–Ω—á–∏–∫',
        '–í–∏—Ç—è–Ω',
    ];
    const surNames = [
        '–ë–æ–±—Ä',
        '–ñ–µ—Å—Ç–∫–∏–π',
        '–ö—Ä–∏–≤–æ–π',
        '–ó–∞–Ω—É–¥–∞',
        '–ú–æ–∑–∏–ª–∞',
        '–ü–µ—Å',
        '–ì–∞–Ω–≥—Å—Ç–µ—Ä',
        '–ß–µ—Ä–Ω—ã–π',
        '–î–∏–∫–∏–π',
        '–¶–µ–ø–Ω–æ–π',
        '–®–∞–ª—å–Ω–æ–π',
        '–ó–µ–ª–µ–Ω—ã–π',
        '–ú–∞—Å–ª–∏–Ω–Ω–∏–∫',
    ];
    const enemies = [];
    const enemiesTargetCount = Math.floor(Math.random() * 2) + 2;
    while ((enemies === null || enemies === void 0 ? void 0 : enemies.length) !== enemiesTargetCount) {
        const x = Math.floor(Math.random() * 200);
        const y = Math.floor(Math.random() * 200);
        const nameIndex = Math.floor(Math.random() * (names === null || names === void 0 ? void 0 : names.length));
        const name = names[nameIndex];
        names.splice(nameIndex, 1);
        const surNameIndex = Math.floor(Math.random() * (names === null || names === void 0 ? void 0 : names.length));
        const surName = surNames[surNameIndex];
        surNames.splice(surNameIndex, 1);
        const pogonalo = `${name} ${surName}`;
        enemies.push({ x, y, name: pogonalo });
    }
    return enemies;
}
function calculateDistance(posOne, posTwo) {
    const deltaX = posTwo.x - posOne.x;
    const deltaY = posTwo.y - posOne.y;
    return Math.floor(Math.sqrt(deltaX * deltaX + deltaY * deltaY)) + 1;
}
function calculateSpread(shotsPrev, distance) {
    if (distance > 2000)
        return 100;
    const spread = Math.floor(shotsPrev * distance ** 0.6);
    if (spread >= 100)
        return 100;
    return spread;
}
function calculateDamage(distance, damage) {
    const calcDamage = damage - (distance / 50) ** 2 + Math.random() * 5 - 5;
    if (calcDamage <= 0)
        return 0;
    return Math.floor(calcDamage);
}
function buttlePart(enemyList, damageToPlayer) {
    let isAlive = true;
    const phrasesShot = [
        '–ê–π, –º–ª—è',
        '–ú–∞—Å–ª–∏–Ω—É –ø–æ–π–º–∞–ª',
        '–ï–ø—Ç–∞',
        '–ú–µ–Ω—è –ø–æ–¥–±–∏–ª–∏, –ø–∞—Ü–∞–Ω—ã',
        '–ü–æ–≥–∞–Ω–æ —Ç–æ –∫–∞–∫',
        '–ó–∞—Ü–µ–ø–∏–ª–æ, –ø–∞—Ü–∞–Ω—ã',
    ];
    const phrasesMiss = [
        '–ú–æ–∑–∏–ª–∞',
        '–ö–æ—Å–æ–π',
        '–ë–∞–∫–ª–∞–Ω, —Ç—ã –º–∏–º–æ',
        '–ê–π, —Ñ–∞—Ä–∞—Ç–Ω—É–ª–æ',
        '–í –º–æ–ª–æ–∫–æ',
    ];
    let logs = '';
    enemyList.forEach((enemyPos, index) => {
        const damageToPlayerRandom = Math.floor(25 + Math.random() * 25);
        damageToPlayer += damageToPlayerRandom;
        logs += `\n–í–∞–º —Å–Ω–µ—Å–ª–∏ ${damageToPlayerRandom}ü´Ä, –æ—Å—Ç–∞–ª–æ—Å—å ${Math.max(100 - damageToPlayer, 0)}ü´Ä,
—Å–µ–π—á–∞—Å —Å—Ç—Ä–µ–ª—è–ª ${enemyPos.name}\n`;
        if (damageToPlayer >= 120) {
            logs += '–í—ã —É–±–∏—Ç—ã.\n';
            enemyList.splice(0, enemyList.length);
            isAlive = false;
        }
        else {
            const playerPos = { x: 0, y: 0 };
            const distance = calculateDistance(enemyPos, playerPos);
            const shoots = Math.floor(Math.random() * 3) + 1;
            const shootWord = shoots === 1 ? '–≤—ã—Å—Ç—Ä–µ–ª—É' : shoots === 5 ? '–≤—ã—Å—Ç—Ä–µ–ª–æ–≤' : '–≤—ã—Å—Ç—Ä–µ–ª–∞';
            logs += `–í—ã —Å—Ç—Ä–µ–ª—è–µ—Ç–µ –æ—á–µ—Ä–µ–¥—å—é –ø–æ ${shoots}üî• ${shootWord} –≤ –æ—Ç–≤–µ—Ç.\n`;
            logs += '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ' + distance;
            let totalDamage = 0;
            for (let shootIndex = 1; shootIndex <= shoots; shootIndex++) {
                if (totalDamage >= 100) {
                    logs += '\n–í—Ä–∞–≥ ' + enemyPos.name + ' —É–±–∏—Ç.';
                    enemyList.splice(index, 1);
                    break;
                }
                logs += '\n–í—ã—Å—Ç—Ä–µ–ª' + shootIndex + ': ';
                const spread = calculateSpread(shootIndex, distance);
                const damage = calculateDamage(distance, 120);
                const chanceToShoot = 100 - spread;
                const shootIsOk = 100 * Math.random() <= chanceToShoot;
                if (shootIsOk)
                    totalDamage += damage;
                logs += '–†–∞–∑–±—Ä–æ—Å: ' + spread + '%.  ';
                logs += '–£—Ä–æ–Ω: ' + damage + 'ü´Ä. ';
                const phrasesIndex = Math.floor(Math.random() * phrasesShot.length);
                const phraseShot = phrasesShot[phrasesIndex];
                const phrasesMissIndex = Math.floor(Math.random() * phrasesMiss.length);
                const phraseMiss = phrasesMiss[phrasesMissIndex];
                logs += shootIsOk
                    ? '–ü–∞–ø–∞–¥–∞–Ω–∏–µ. ' + phraseShot
                    : '–ü—Ä–æ–º–∞—Ö. ' + phraseMiss;
            }
            logs += '\n–ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–Ω: ' + totalDamage + 'ü´Ä\n\n';
            totalDamage = 0;
        }
    });
    return { logs, enemyList, damageToPlayer, isAlive };
}
console.log(onSceneEnter());
//# sourceMappingURL=Untitled-2.js.map