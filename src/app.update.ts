import { Injectable, Logger } from '@nestjs/common';
import {
  Update,
  Command,
  Ctx,
  Use,
  Next,
  Action,
  Start,
} from 'nestjs-telegraf';
import { Markup, Scenes } from 'telegraf';
import { NextFunction } from 'express';
import { TelegrafContext } from 'src/interfaces/telegraf-context.interface';
import { AppService } from './app.service';
import { ChaptersEntity } from './database/entities/chapters.entity';
import { ScenesEnum } from './scenes/enums/scenes.enum';
import { PlayerDataDto } from './common/player-data.dto';

@Update()
@Injectable()
export default class AppUpdate {
  private readonly logger = new Logger(AppUpdate.name);

  constructor(private readonly appService: AppService) {}

  onApplicationBootstrap() {
    this.appService.commandListInit();
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
   * @param next –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã
   */
  @Use()
  async onUse(@Ctx() ctx: TelegrafContext, @Next() next: NextFunction) {
    try {
      // @ts-ignore
      const messageId = ctx?.update?.message?.message_id;
      // @ts-ignore
      const chatId = ctx?.update?.message?.chat.id;
      // @ts-ignore
      const menuMessage = ctx?.update?.message?.text;
      if (menuMessage) {
        await this.appService.clearMenuCommands(menuMessage, chatId, messageId);
      }
      await this.appService.getStorePlayerData(ctx);
      next();
    } catch (error) {
      console.error(error);
    }
  }

  @Command('/display')
  async onDisplay(@Ctx() ctx: TelegrafContext) {
    try {
      const playerData: PlayerDataDto =
        await this.appService.getStorePlayerData(ctx);
      const imgLink = this.appService.escapeText('https://clck.ru/33PBvE');
      const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('–ù–∞—á–∞–ª–æ', 'menu'),
      ]).reply_markup;
      const messageDisplay = await ctx.replyWithPhoto(imgLink, {
        caption: 'display',
        // @ts-ignore
        has_spoiler: true,
        // @ts-ignore
        reply_markup: keyboard,
      });
      ctx.scene.state[playerData.player.telegram_id] =
        await this.appService.updateStorePlayer(ctx, {
          ...playerData.player,
          chat_id: messageDisplay.chat.id,
          message_display_id: messageDisplay.message_id,
        });
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞');
      console.log('cant create monitor');
      console.error(error);
    }
  }

  @Start()
  @Action('menu')
  @Command('menu')
  async onMenu(@Ctx() ctx: TelegrafContext) {
    try {
      const playerData: PlayerDataDto =
        await this.appService.getStorePlayerData(ctx);
      const chapterNext: ChaptersEntity = await this.appService.getNextChapter(
        playerData,
      );
      const keyboardButtons: any[] = [];
      keyboardButtons.push(
        Markup.button.callback('üìç–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ', ScenesEnum.SCENE_LOCATION),
      );
      keyboardButtons.push(
        Markup.button.callback('üìüPDA', ScenesEnum.SCENE_PDA),
      );
      keyboardButtons.push(
        Markup.button.callback(
          '‚ò¢Ô∏è–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
          ScenesEnum.SCENE_QUEST,
          !!!chapterNext,
        ),
      );
      const keyboard = Markup.inlineKeyboard(keyboardButtons, {
        columns: 1,
      }).reply_markup;

      this.appService.updateDisplay(
        playerData?.player,
        keyboard,
        this.appService.escapeText(
          `–í—ã –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: ${playerData?.playerLocation?.location}.`,
        ),
        playerData?.playerLocation?.image,
      );
    } catch (error) {
      console.error(error);
    }
  }

  @Action(/^scene.*/gim)
  async enterBanditScene(@Ctx() ctx: Scenes.SceneContext) {
    // @ts-ignore
    const match = ctx.match[0];
    if (match) {
      const scene: ScenesEnum = match;
      await ctx.scene.enter(scene);
    }
    return;
  }

  // @Action(ScenesEnum.SCENE_PDA)
  // @Command(ScenesEnum.SCENE_PDA)
  // async enterPdaScene(@Ctx() ctx: Scenes.SceneContext) {
  //   await ctx.scene.enter(ScenesEnum.SCENE_PDA);
  // }
  // @Action(ScenesEnum.SCENE_ANOMALY_ROAD)
  // @Command(ScenesEnum.SCENE_ANOMALY_ROAD)
  // async enterAnomalyRoadScene(@Ctx() ctx: Scenes.SceneContext) {
  //   await ctx.scene.enter(ScenesEnum.SCENE_ANOMALY_ROAD);
  // }
  // @Action(ScenesEnum.SCENE_MUTANT)
  // @Command(ScenesEnum.SCENE_MUTANT)
  // async enterMutantScene(@Ctx() ctx: Scenes.SceneContext) {
  //   await ctx.scene.enter(ScenesEnum.SCENE_MUTANT);
  // }
  // @Action(ScenesEnum.SCENE_ARTIFACT)
  // @Command(ScenesEnum.SCENE_ARTIFACT)
  // async enterArtefactScene(@Ctx() ctx: Scenes.SceneContext) {
  //   await ctx.scene.enter(ScenesEnum.SCENE_ARTIFACT);
  // }
  // @Action(ScenesEnum.SCENE_LOCATION)
  // @Command(ScenesEnum.SCENE_LOCATION)
  // async enterLocationScene(@Ctx() ctx: Scenes.SceneContext) {
  //   await ctx.scene.enter(ScenesEnum.SCENE_LOCATION);
  // }
  // @Action(ScenesEnum.SCENE_QUEST)
  // @Command(ScenesEnum.SCENE_QUEST)
  // async enterQuestScene(@Ctx() ctx: Scenes.SceneContext) {
  //   await ctx.scene.enter(ScenesEnum.SCENE_QUEST);
  // }
  // Markup.button.callback('üî©–ê–Ω–æ–º–∞–ª–∏—è', ScenesEnum.ANOMALY_ROAD),
  // Markup.button.callback('üê´–ú—É—Ç–∞–Ω—Ç', ScenesEnum.MUTANT),
  // Markup.button.callback('ü§∑–ë–∞–Ω–¥–∏—Ç—ã', ScenesEnum.BANDIT),
  // Markup.button.callback('ü•¶–ê—Ä—Ç–µ—Ñ–∞–∫—Ç', ScenesEnum.ARTIFACT),
  // await ctx.replyWithHTML(
  //   `–í—ã –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: <b>${locations?.name}</b>.`,
  //   Markup.inlineKeyboard(
  //     [
  //       // Markup.button.callback('üî©–ê–Ω–æ–º–∞–ª–∏—è', ScenesEnum.ANOMALY_ROAD),
  //       // Markup.button.callback('üê´–ú—É—Ç–∞–Ω—Ç', ScenesEnum.MUTANT),
  //       // Markup.button.callback('ü§∑–ë–∞–Ω–¥–∏—Ç—ã', ScenesEnum.BANDIT),
  //       // Markup.button.callback('ü•¶–ê—Ä—Ç–µ—Ñ–∞–∫—Ç', ScenesEnum.ARTIFACT),
  //       Markup.button.callback('üìç–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ', ScenesEnum.LOCATION),
  //       Markup.button.callback('üìüPDA', 'PDA'),
  //       Markup.button.callback('‚ò¢Ô∏è–ò—Å—Ç–æ—Ä–∏—è', ScenesEnum.QUEST, !!!nextChapter),
  //     ],
  //     {
  //       columns: 2,
  //     },
  //   ),
  // );
  // @Action(/chapterXXX.*/gim)
  // async onChoose(@Ctx() ctx: TelegrafContext, @Next() next: NextFunction) {
  //   const match = ctx.match[0];
  //   if (!match) next();
  //   console.log('match', match);
  //   const selectedChapterId = +match.split('XXX')[1]; // chapterXXX1
  //   console.log('choiseId', selectedChapterId);
  //   const telegram_id: number =
  //     ctx?.message?.from.id || ctx?.callbackQuery?.from?.id;
  //   const user: Users = await this.usersRepository.findOne({
  //     where: { telegram_id: telegram_id },
  //   });

  //   let progress: Progress = await this.progressRepository.findOne({
  //     where: {
  //       user_id: user.id,
  //     },
  //   });
  //   console.log('progress1', progress);

  //   // if (progress.chapter_id > nextChapterId) {
  //   //   await ctx.reply(
  //   //     '–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –≤—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏',
  //   //     Markup.inlineKeyboard([Markup.button.callback('Menu', 'menu')], {
  //   //       columns: 2,
  //   //     }),
  //   //   );
  //   //   return;
  //   // }

  //   await this.progressRepository.update(progress.progress_id, {
  //     chapter_id: selectedChapterId,
  //   });

  //   progress = await this.progressRepository.findOne({
  //     where: {
  //       user_id: user.id,
  //     },
  //   });
  //   console.log('progress2', progress);

  //   const newChapter: Chapters = await this.chaptersRepository.findOne({
  //     where: { id: progress.chapter_id },
  //   });
  //   console.log('newChapter', newChapter);

  //   const choises: Choices[] = await this.choicesRepository.find({
  //     where: { chapter_id: newChapter.id },
  //   });
  //   console.log('choiseschoises', choises);

  //   choises.forEach(async (item) => {
  //     const chapter = await this.chaptersRepository.findOne({
  //       where: { id: item.chapter_id },
  //     });
  //     return {
  //       ...item,
  //       description: chapter.character,
  //     };
  //   });

  //   await ctx.replyWithHTML(
  //     `<b>${newChapter.character}:</b> ${newChapter.content}`,
  //     Markup.inlineKeyboard(
  //       [
  //         // ...choises.map((item) =>
  //         //   Markup.button.callback(
  //         //     item?.description || 'neeext',
  //         //     'chapterXXX' + item.next_chapter_id.toString(),
  //         //   ),
  //         // ),
  //         Markup.button.callback('üçî–ú–µ–Ω—é', 'menu'),
  //         Markup.button.callback('‚ôªÔ∏è–û–±—Ö–æ–¥ –∞–Ω–æ–º–∞–ª–∏–π', ScenesEnum.ANOMALY_ROAD),
  //         Markup.button.callback('üê´–í—Å—Ç—Ä–µ—á–∞ —Å –º—É—Ç–∞–Ω—Ç–æ–º', ScenesEnum.MUTANT),
  //         Markup.button.callback('ü•¶–ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤', ScenesEnum.ARTIFACT),
  //         Markup.button.callback('üìç–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ', ScenesEnum.LOCATION),
  //         Markup.button.callback('ü§ô–î–∏–∞–ª–æ–≥', ScenesEnum.QUEST),
  //       ],
  //       {
  //         columns: 1,
  //       },
  //     ),
  //   );
  // }
  /**
   * –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏.
–í—Ä–∞—â–∞–π—Ç–µ –±–∞—Ä–∞–±–∞–Ω—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "Spin".
–ë–∞—Ä–∞–±–∞–Ω—ã –±—É–¥—É—Ç –≤—Ä–∞—â–∞—Ç—å—Å—è –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≤—ã–ø–∞–¥–∞–ª–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤.
–ï—Å–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—ã–ø–ª–∞—Ç—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π –≤—ã–ø–ª–∞—Ç.
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É, —Å–Ω–æ–≤–∞ –ø—Ä–æ–∫—Ä—É—Ç–∏–≤ –±–∞—Ä–∞–±–∞–Ω—ã, –∏–ª–∏ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –≤—ã–∏–≥—Ä—ã—à –∏ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã.
   * 
   * 
   * 
   * 
   */

  // // @Command('game')
  // @Action('game')
  // async cobalt(@Ctx() ctx: Scenes.SceneContext) {
  //   if (!ctx?.scene?.current?.id) {
  //     await ctx.reply('Welcome back!');
  //     await ctx.scene.enter(ScenesEnum.COBALT_SCENE);
  //   } else {
  //     await ctx.reply(ctx?.scene?.current?.id);
  //   }
  // }

  // // @Command('help')
  // @Action('help')
  // async help(@Ctx() ctx: Scenes.SceneContext) {
  //   await ctx.replyWithMarkdown(
  //     `Hello! Its a *Cobalt game* series.\n\nFor now you can enter to the gambling slots ‚ô•Ô∏è directly or play in story mode üéÆ.\nStory mode can give you new slots machines, some of them wip for now.\n\n*Important!* You can not call main menu commands then you playing, you can push only last sended buttons, not old one.\nIf something goes wrong just leave the games to main menu and try again.\n\nüóùYou also can register your Ethereum wallet, deposit some ETHs for support me, withdraw jackpot ETHs in future.`,
  //   );
  // }

  // // @Command('gambling')
  // @Action('gambling')
  // async gambling(@Ctx() ctx: Scenes.SceneContext) {
  //   if (!ctx?.scene?.current?.id) {
  //     await ctx.reply('Welcome back!');
  //     await ctx.scene.enter(ScenesEnum.GAMBLING_SCENE);
  //   } else {
  //     await ctx.reply(ctx?.scene?.current?.id);
  //   }
  // }

  // @Command('/start') // USE ON END OF PROGRAM
  // async actionsMiddleware(
  //   @Ctx() ctx: TelegrafContext,
  //   @Next() next: NextFunction,
  // ) {
  //   await this.telegramService.commandListInit();
  //   await ctx.reply(
  //     'You are in main menu. For play press "game" button. For find already reached gambling machines press "gambling"',
  //     Markup.inlineKeyboard(
  //       [
  //         Markup.button.callback('üç≠ help', 'help'),
  //         Markup.button.callback('üéÆ storymode game', 'game'),
  //         Markup.button.callback('‚ô•Ô∏è gambling slots', 'gambling'),
  //         Markup.button.callback('üóù Ethereum registration', 'registration'),
  //       ],
  //       { columns: 1 },
  //     ),
  //   );
  //   next();
  // }

  // @Start()
  // async initPlayer(@Ctx() ctx: Scenes.SceneContext) {
  //     // console.log( JSON.stringify(ctx.message, null, 2));
  //     if (!ctx) return null;
  //     const playerId: PlayerModel['telegram_id'] = +ctx?.message?.from?.id;
  //     const playerDto: PlayerModel = {
  //         telegram_id: +playerId,
  //         capital: 0,
  //         scene: ScenesEnum.SLOT_SCENE,
  //         name: ctx?.message?.from?.first_name,
  //     }
  //     const player = await this.mongoLibPlayerService.getPlayerBytelegram_id(playerId);
  //     if (player?.telegram_id) {
  //         await ctx.reply(`Hello again, ${player?.name || 'player'}!`);
  //         await ctx.scene.enter(player.scene as ScenesEnum);
  //     } else {
  //         const newPlayer = await this.mongoLibPlayerService.createPlayer(playerDto);
  //         await ctx.reply(`Welocome to casino, ${newPlayer?.name || 'new player'}!`);
  //         await ctx.scene.enter(newPlayer.scene as ScenesEnum);
  //     }
  // }

  // @Command('/stats')
  // async stats(@Ctx() ctx: Scenes.SceneContext) {
  //     const playerId: PlayerModel['telegram_id'] = +ctx?.message?.from?.id;
  //     const player = await this.mongoLibPlayerService.getPlayerBytelegram_id(playerId);
  //     await ctx.reply(`Your capital: ${player?.capital} !`);
  // }

  // @Command('/slot')
  // async slot(@Ctx() ctx: Scenes.SceneContext) {
  //     await ctx.scene.enter(ScenesEnum.SLOT_SCENE);
  // }

  // @Command('/peace')
  // async peace(@Ctx() ctx: Scenes.SceneContext) {
  //     // console.log(ctx.message);
  //     await ctx.scene.enter(ScenesEnum.TEST_SCENE);
  // }

  // @Command('/invest')
  // async invest(@Ctx() ctx: Scenes.SceneContext) {
  //     const playerId: PlayerModel['telegram_id'] = +ctx?.message?.from?.id;
  //     const player = await this.mongoLibPlayerService.getPlayerBytelegram_id(playerId);
  //     if (!player) {
  //         ctx.reply('You account not registered. Send comman /start');
  //     } else {
  //         await ctx.reply(`Your capital was: ${player.capital} !`);
  //         player.capital = player.capital + 500;
  //         this.mongoLibPlayerService.updatePlayer(player);
  //         await ctx.reply(`Your capital for now: ${player.capital} !`);
  //     }
  // }

  // @Command('/test')
  // start(ctx: Scenes.SceneContext) {
  //     ctx.scene.enter('test');
  // }

  // @Hears(/.*/img)
  // async phrase(@Ctx() ctx: TelegrafContext, @Message() message, @Sender() sender) {
  //     if (this.playerCtx) {
  //         const options = this.playerCtx?.options?.filter(item => item.option === message.text);
  //         const phraseId = options[0].id;
  //         const actor: ActorDocument = await this.appService.getActorBytelegram_id(sender.id);
  //         const resultOfUpdate = await this.appService.setActorStoryPlace(actor._id, phraseId);
  //         this.renderPhrase(ctx, sender, phraseId || '62d482b8e724418dca4c9737');
  //     } else {
  //         await ctx.reply('End of dialog. Try again /game');
  //     }
  // }

  // async renderPhrase(@Ctx() ctx: TelegrafContext, @Sender() sender, phraseId) {
  //     const phrase = await this.appService.getDialogPhrase(phraseId);
  //     this.playerCtx = phrase;
  //     if (!phrase) ctx.reply('Catn find phrase');
  //     for (let i = 0; i < phrase.phrases.length; i++) {
  //         const phraseToSend = phrase.phrases[i];
  //         await ctx.replyWithMarkdown(`*${phraseToSend.actorName}*: ${phraseToSend.text}`);
  //         // await this.sleep(phraseToSend.text.length * 20);
  //     }
  //     if (phrase.options.length === 0) {
  //         await ctx.reply('End of dialog. Try /game');
  //     } else {
  //         // @ts-ignore
  //         await ctx.reply('–í–∞—à –≤—ã–±–æ—Ä:', Markup.keyboard(phrase.options.map(item => item.option)).oneTime().resize());
  //     }
  // }

  // await ctx.reply(JSON.stringify(ctx.message, null, 2));
  // options: [
  //   {
  //     option: '–ù–∞ —Å–µ–≤–µ—Ä',
  //     id: new ObjectId("62d86816e080dff2bfa9e954")
  //   },
  //   { option: '–í —Ç–æ–ø—å', id: new ObjectId("62d86892e080dff2bfa9e956") },
  //   {
  //     option: '–ù–∞ –∑–∞–ø–∞–¥',
  //     id: new ObjectId("62d4833ee724418dca4c973b")
  //   }
  // ]

  // @Command('/setid') // —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ—Å—è —Å "/"
  // async updatetelegram_id(
  //     @Ctx() ctx: TelegrafContext, // –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞
  //     @Sender('first_name') firstName: string // –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  // ) {
  //     await ctx.reply(JSON.stringify(ctx.message, null, 2));
  // }

  // @Hears(/[A-Xa-x0-9]{24}/) // —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
  // async hearsRegex2(@Ctx() ctx: TelegrafContext, @Message() message, @Sender() sender) {
  //     const result = await this.telegramService.updateActortelegram_id(sender.id, message.text);
  //     if (result) {
  //         await ctx.reply(JSON.stringify(result, null, 2));
  //     } else {
  //         await ctx.reply('Telegram ID not updated');
  //     }
  // }

  // @Start()
  // async start(@Ctx() ctx: TelegrafContext) {
  //     // 1. reply - —ç—Ö–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
  //     // 2. await –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
  //     // –∏–Ω–∞—á–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è
  //     await ctx.reply('Welcome to Sfxdx documentation');
  //     // –ù–∞ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤
  //     // –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–Ω–æ–ø–æ–∫–∏/—Å—Ç–∏–∫–µ—Ä—ã/—Ñ–∞–π–ª—ã/action —á–∞—Ç–∞/–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Ç–¥
  //     await ctx.reply('Welcome');
  //     await ctx.replyWithHTML('<b>Welcome</b>'); // —É—Ä–µ–∑–∞–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å HTML
  //     await ctx.replyWithMarkdown('**Welcome**'); // —É—Ä–µ–∑–∞–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å MarkDown
  //     // –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –≤ –º–µ–Ω—é
  //     // *bold \*text*
  //     // _italic \*text_
  //     // __underline__
  //     await ctx.reply('Welcome');
  // }

  // @UseGuards(AdminGuard) // —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ "—Ä–æ—É—Ç", –∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞
  // @Command('/admin') // —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ—Å—è —Å "/"
  // async onAdminCommand(
  //     @Ctx() ctx: TelegrafContext, // –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞
  //     @Sender('first_name') firstName: string // –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  // ) {
  //     await ctx.reply(
  //         `Hey admin ${firstName}`, // –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –µ–≥–æ –∫–æ–º–∞–Ω–¥—É "/admin".
  //         Markup.inlineKeyboard([ // –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã inline –∫–Ω–æ–ø–æ–∫ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  //             Markup.button.callback(
  //                 'üöÄ notify', // –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ
  //                 'notification' // –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
  //                 // –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–∑–æ–≤–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ "/notification"
  //             ),
  //             // —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç true –∏–ª–∏ false
  //             // –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–µ—Ç
  //         ]));
  // }

  // @Help()
  // async help(@Ctx() ctx: TelegrafContext) {
  //     await ctx.reply('Send me a sticker');
  // }

  // @On('sticker')
  // async on(@Ctx() ctx: TelegrafContext) {
  //     await ctx.reply('üëç');
  // }

  // @Hears('hi')
  // async hears(@Ctx() ctx: TelegrafContext) {
  //     await ctx.reply('Hey there');
  // }

  // @Hears('Sfxdx') // —Å—Ç—Ä–æ–∫–∞
  // async hearsString(@Ctx() ctx: TelegrafContext) {
  //     await ctx.reply('—è –Ω–∞—à–µ–ª —Ç–≤–æ—é —Å—Ç—Ä–æ–∫—É')
  // }

  // @Hears(['Sfxdx', 'Google', 'Mazda 6']) // –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
  // async hearsArray(@Ctx() ctx: TelegrafContext) {
  //     await ctx.reply('—è –Ω–∞—à–µ–ª –æ–¥–Ω—É –∏–∑ —Ç–≤–æ–∏—Ö —Å—Ç—Ä–æ–∫')
  // }

  // @Hears(/[A-Xa-x0-9]{66}/) // —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
  // async hearsRegex(@Ctx() ctx: TelegrafContext) {
  //     await ctx.reply('—è –Ω–∞—à–µ–ª transactionHash —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è')
  // }

  // // Markup.button.callback('textInsideButton', 'buttonClickEvent') // => —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ 'buttonClickEvent'
  // @Action('buttonClickEvent')
  // onButtonClickEvent(ctx: TelegrafContext) {
  //     ctx.reply('2+2=?', Markup.keyboard([{ text: 'hello' }]));
  // }

  // @Command('scene')
  // async onSceneCommand(@Ctx() ctx: TelegrafContext): Promise<void> {
  //     await ctx.scene.enter('UNIQ_SCENE_ID');SLOT_SCENE
  // }

  // // –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å update –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ,
  // // –∞ –Ω–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∞–º–æ–π —Å—Ü–µ–Ω—ã. –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Payload –æ–ø–ª–∞—Ç—ã,
  // // –∫—É–¥–∞ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ü–µ–Ω—É, –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ.

  // async extra(@Ctx() ctx: TelegrafContext) {
  //     // ctx.wizard.state // –ø–æ–ª—É—á–µ–Ω–∏–µ state => {}
  //     // ctx.wizard.state.age = 77 // –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ age
  //     // return ctx.wizard.state.age // –ø–æ–ª—É—á–µ–Ω–∏–µ age => 77

  //     const buttonArrayOfStrings = [
  //         '7', '8', '9', '*',
  //         '4', '5', '6', '/',
  //         '1', '2', '3', '-',
  //         '0', '.', '=', '+',
  //     ];

  //     // –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π. –ö–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫
  //     ctx.reply(
  //         '–¢–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', // –Ω–µ–ª—å–∑—è –≤—ã—Å–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
  //         // –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
  //         // –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤—Ä—É—á–Ω—É—é
  //         Markup.keyboard(
  //             buttonArrayOfStrings,
  //             { // –∫–æ–Ω—Ñ–∏–≥
  //                 columns: 4 // –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  //             }) //
  //             .oneTime() // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ª—é–±—É—é –∏–∑ –∫–Ω–æ–ø–æ–∫
  //             .resize(), // –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ —Ç–∞ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç –≤ –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
  //     );
  //     await ctx.replyWithHTML(
  //         '<b>–¢–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML</b>',
  //         Markup.inlineKeyboard([ // –æ—Ç–ø—Ä–∞–≤–∫–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  //             Markup.button.callback('üîô', 'leave'), // –ø—Ä–∏–º–µ—Ä callback –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç —ç–∫—à–Ω leave
  //         ]));
  // }
  // @Action('quiz')
  // async onQuiz(@Ctx() ctx: TelegrafContext) {
  //     await ctx.scene.enter('QUIZ_WIZARD_ID'); // —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≤—Ö–æ–¥–∞
  // }
  // doSomething(@Ctx() ctx: TelegrafContext) {
  //     try {
  //         true
  //     } catch (error) {
  //         //—É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –æ–Ω –ø–æ–Ω–∏–º–∞–ª, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
  //         ctx.reply(`–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... ${error.message}. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ "–ø–æ—á—Ç–∞" –µ—â–µ —Ä–∞–∑`);
  //         //—É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –æ—à–∏–±–∫–∞—Ö
  //         this.logger.log('Doing something...');
  //     }
  // }
}
