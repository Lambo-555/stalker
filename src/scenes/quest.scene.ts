import { Logger } from '@nestjs/common';
import { NextFunction } from 'express';
import {
  Scene,
  SceneEnter,
  SceneLeave,
  Ctx,
  Action,
  Next,
} from 'nestjs-telegraf';
import { AppService } from 'src/app.service';
import { PlayerDataDto } from 'src/common/player-data.dto';
import { ChaptersEntity } from 'src/user/entities/chapters.entity';
import { ChoicesEntity } from 'src/user/entities/choices.entity';
import { Markup } from 'telegraf';
import { TelegrafContext } from '../interfaces/telegraf-context.interface';
import { ScenesEnum } from './enums/scenes.enum';

// –≥–∞–Ω–≥ –∫–∞—Ä—Å
// –Ω–∞–±–∏—Ä–∞–µ—à—å —Ç–∏–º—É, –∫–∞—Ç–∞–µ—à—å—Å—è –ø–æ —Ä–∞–π–æ–Ω—É –∏ –æ—Ç—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—à—å –Ω–∞—Ä–∫–æ–º–∞—Ñ–∏—é
// —Ü–µ–ª—å –∏–≥—Ä—ã - —Å–æ–±—Ä–∞—Ç—å —Ç–∏–º—É, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—à–∫–∏, –Ω–∞–Ω–∏–º–∞—Ç—å –Ω–æ—Ä–º–∞ –≤–æ–¥–∏—Ç–µ–ª—è
// –∞–≤—Ç–æ –º–æ–≥—É—Ç —Ç–æ—Ä–º–æ–∑–∏—Ç—å, –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞—Ç—å, –≥–æ–Ω—è—Ç—å—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
// –º–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –ø–æ—Ç—Ä—É–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ —Ä–µ–π–¥—ã –±—É–¥—É—á–∏ –¥–æ–º–∞
// —Å–¥–µ–ª–∞—Ç—å —Ä–∞–π–æ–Ω –±–æ–≥–∞—á–µ - –Ω–æ–≤–∞—è –º–∏—Å—Å–∏—è
// —á–µ–º –±–æ–≥–∞—á–µ –∏ —É–º–Ω–µ–µ —Ä–∞–π–æ–Ω, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–º–æ—á–µ–∫ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç—ã

@Scene(ScenesEnum.SCENE_QUEST)
export class QuestScene {
  private readonly logger = new Logger(QuestScene.name);

  constructor(private readonly appService: AppService) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: TelegrafContext) {
    try {
      const playerData: PlayerDataDto =
        await this.appService.getStorePlayerData(ctx);
      const chapter: ChaptersEntity = await this.appService.getNextChapter(
        playerData,
      );
      if (chapter.location === playerData.playerLocation.location) {
        const keyboard = Markup.inlineKeyboard([
          Markup.button.callback('ü§ù–î–∏–∞–ª–æ–≥', 'chapterXXX' + chapter.code),
          Markup.button.callback('‚úãüèª–£–π—Ç–∏', 'leave'),
        ]).reply_markup;
        await this.appService.updateDisplay(
          playerData.playerProgress,
          keyboard,
          `${chapter?.character}`,
          playerData.playerLocation.image,
        );
      } else {
        const keyboard = Markup.inlineKeyboard([
          Markup.button.callback('‚úãüèª–£–π—Ç–∏', 'leave'),
        ]).reply_markup;
        await this.appService.updateDisplay(
          playerData.playerProgress,
          keyboard,
          `–ó–¥–µ—Å—å –Ω–µ —Å –∫–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å`,
          playerData.playerLocation.image,
        );
      }
    } catch (error) {
      console.error(error);
    }
  }

  @Action(/chapterXXX.*/gim)
  async onChooseChapter(
    @Ctx() ctx: TelegrafContext,
    @Next() next: NextFunction,
  ) {
    try {
      const match = ctx.match[0];
      if (!match) next();
      const selectedChapterCode: string = match.split('XXX')[1];
      let playerData: PlayerDataDto = await this.appService.getStorePlayerData(
        ctx,
      );
      ctx.scene.state[playerData.player.telegram_id] =
        await this.appService.updateStorePlayerProgress(ctx, {
          ...playerData.playerProgress,
          chapter_code: selectedChapterCode,
        });
      playerData = await this.appService.getStorePlayerData(ctx);
      const nextChapter: ChaptersEntity = await this.appService.getNextChapter(
        playerData,
      );
      if (!nextChapter) {
        const keyboard = Markup.inlineKeyboard([
          Markup.button.callback('‚úãüèª–£–π—Ç–∏', 'leave'),
        ]).reply_markup;
        await this.appService.updateDisplay(
          playerData.playerProgress,
          keyboard,
          `–ó–¥–µ—Å—å –Ω–µ —Å –∫–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å`,
          playerData.playerLocation.image,
        );
      } else {
        const choices: ChoicesEntity[] = await this.appService.getChoiceList(
          nextChapter.code,
        );
        choices.forEach(async (item) => {
          const chapter: ChaptersEntity =
            await this.appService.getChapterByCode(item.next_code);
          return {
            ...item,
            description: chapter.character,
          };
        });
        const keyboard = Markup.inlineKeyboard(
          [
            ...choices.map((item) =>
              Markup.button.callback(
                this.appService.escapeText(item?.description),
                'chapterXXX' + item.next_code.toString(),
              ),
            ),
          ],
          {
            columns: 1,
          },
        ).reply_markup;
        await this.appService.updateDisplay(
          playerData.playerProgress,
          keyboard,
          `${nextChapter?.character}: ` + nextChapter.content,
          playerData.playerLocation.image,
        );
      }
    } catch (error) {
      console.error(error);
    }
  }

  @Action('leave')
  async onLeaveCommand(@Ctx() ctx: TelegrafContext) {
    await ctx.scene.leave();
  }

  @SceneLeave()
  async onSceneLeave(@Ctx() ctx: TelegrafContext) {
    try {
      await ctx.scene.leave();
      const playerData: PlayerDataDto =
        await this.appService.getStorePlayerData(ctx);
      const chapterNext: ChaptersEntity = await this.appService.getNextChapter(
        playerData,
      );
      const keyboard = Markup.inlineKeyboard(
        [
          Markup.button.callback('üìç–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ', ScenesEnum.SCENE_LOCATION),
          Markup.button.callback('‚ò†Ô∏è–ë–∞–Ω–¥–∏—Ç—ã', ScenesEnum.SCENE_BANDIT),
          Markup.button.callback('üìüPDA', ScenesEnum.SCENE_PDA),
          Markup.button.callback(
            '‚ò¢Ô∏è–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
            ScenesEnum.SCENE_QUEST,
            !!!chapterNext,
          ),
        ],
        {
          columns: 1,
        },
      ).reply_markup;
      this.appService.updateDisplay(
        playerData?.playerProgress,
        keyboard,
        this.appService.escapeText(
          `–í—ã –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: ${playerData?.playerLocation?.location}.`,
        ),
        playerData?.playerLocation?.image,
      );
    } catch (error) {
      console.error(error);
    }
  }
}
