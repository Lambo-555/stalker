import { Inject, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { NextFunction } from 'express';
import {
  Scene,
  SceneEnter,
  SceneLeave,
  Command,
  Hears,
  Ctx,
  Action,
  TELEGRAF_STAGE,
  Next,
  Use,
} from 'nestjs-telegraf';
import { AppService } from 'src/app.service';
import { Anomalies } from 'src/user/entities/anomalies.entity';
import { Artifacts } from 'src/user/entities/artifacts.entity';
import { ChaptersEntity } from 'src/user/entities/chapters.entity';
import { Choices } from 'src/user/entities/choices.entity';
import { InventoryItems } from 'src/user/entities/inventory_items.entity';
import { LocationsEntity } from 'src/user/entities/locations.entity';
import { ProgressEntity } from 'src/user/entities/progress.entity';
import { UsersEntity } from 'src/user/entities/users.entity';
import { Markup, Scenes } from 'telegraf';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';
import { Like, Repository } from 'typeorm';
import { TelegrafContext } from '../interfaces/telegraf-context.interface';
import { ActivityEnum } from './enums/activity.enum';
import { ScenesEnum } from './enums/scenes.enum';

// –≥–∞–Ω–≥ –∫–∞—Ä—Å
// –Ω–∞–±–∏—Ä–∞–µ—à—å —Ç–∏–º—É, –∫–∞—Ç–∞–µ—à—å—Å—è –ø–æ —Ä–∞–π–æ–Ω—É –∏ –æ—Ç—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—à—å –Ω–∞—Ä–∫–æ–º–∞—Ñ–∏—é
// —Ü–µ–ª—å –∏–≥—Ä—ã - —Å–æ–±—Ä–∞—Ç—å —Ç–∏–º—É, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—à–∫–∏, –Ω–∞–Ω–∏–º–∞—Ç—å –Ω–æ—Ä–º–∞ –≤–æ–¥–∏—Ç–µ–ª—è
// –∞–≤—Ç–æ –º–æ–≥—É—Ç —Ç–æ—Ä–º–æ–∑–∏—Ç—å, –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞—Ç—å, –≥–æ–Ω—è—Ç—å—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
// –º–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –ø–æ—Ç—Ä—É–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ —Ä–µ–π–¥—ã –±—É–¥—É—á–∏ –¥–æ–º–∞
// —Å–¥–µ–ª–∞—Ç—å —Ä–∞–π–æ–Ω –±–æ–≥–∞—á–µ - –Ω–æ–≤–∞—è –º–∏—Å—Å–∏—è
// —á–µ–º –±–æ–≥–∞—á–µ –∏ —É–º–Ω–µ–µ —Ä–∞–π–æ–Ω, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–º–æ—á–µ–∫ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç—ã

@Scene(ScenesEnum.ARTIFACT)
export class ArtefactScene {
  private readonly logger = new Logger(ArtefactScene.name);

  constructor(
    private readonly appService: AppService,
    @InjectRepository(UsersEntity)
    private readonly usersRepository: Repository<UsersEntity>,
    @InjectRepository(ChaptersEntity)
    private readonly chaptersRepository: Repository<ChaptersEntity>,
    @InjectRepository(Choices)
    private readonly choicesRepository: Repository<Choices>,
    @InjectRepository(ProgressEntity)
    private readonly progressRepository: Repository<ProgressEntity>,
    @InjectRepository(InventoryItems)
    private readonly inventoryItemsRepository: Repository<InventoryItems>,
    @InjectRepository(Artifacts)
    private readonly artifactsRepository: Repository<Artifacts>,
    @InjectRepository(Anomalies)
    private readonly anomaliesRepository: Repository<Anomalies>,
    @InjectRepository(LocationsEntity)
    private readonly locationsRepository: Repository<LocationsEntity>,

  ) {}

  @Use()
  async onRegister(@Ctx() ctx: TelegrafContext, @Next() next: NextFunction) {
    const telegram_id: number =
      ctx?.message?.from.id || ctx?.callbackQuery?.from?.id;
    const user: UsersEntity = await this.usersRepository.findOne({
      where: { telegram_id: telegram_id },
    });
    if (user) {
      const progress = await this.progressRepository.findOne({
        where: { user_id: user.id },
      });
      if (!progress) {
        const lastChapter = await this.chaptersRepository.findOne({
          order: { id: 1 },
          where: { content: Like('üí≠%') },
        });
        await this.progressRepository.save({
          user_id: user.id,
          chapter_id: lastChapter.id,
        });
      }
    } else {
      const location = await this.locationsRepository.findOne({
        where: { name: '–ö–æ—Ä–¥–æ–Ω' },
      });
      const userRegistered: UsersEntity = await this.usersRepository.save({
        telegram_id: telegram_id,
        location: location.id,
      });
      const lastChapter = await this.chaptersRepository.findOne({
        order: { id: 1 },
        where: { content: Like('üí≠') },
      });
      await this.progressRepository.save({
        user_id: userRegistered.id,
        chapter_id: 90, // lastChapter.id,
        location: location.id,
      });
      this.logger.debug(JSON.stringify(userRegistered, null, 2));
    }
    next();
  }

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: TelegrafContext) {
    // TODO use right Tactics to avoid damage from anomaly
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–∏—Å–µ–ª—å, —Ç–æ –Ω–∞–¥–æ —Ç–∏—Ö–æ –∏–¥—Ç–∏ –∏ –Ω–µ –ø–ª–µ—Å–∫–∞—Ç—å—Å—è
    // –µ—Å–ª–∏ —ç—Ç–æ –∂–∞—Ä–∫–∞, —Ç–æ –ª—É—á—à–µ –ø—Ä–æ–±–µ–∂–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ
    // –µ—Å–ª–∏ —Ç–æ —ç–ª–µ–∫—Ç—Ä–∞, —Ç–æ –Ω–∞–¥–æ —á–∞—â–µ —Ä–∞–∑—Ä—è–∂–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏—é –±–æ–ª—Ç–∞–º–∏
    // –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç, —Ç–æ –Ω–∞–¥–æ –∏–¥—Ç–∏ –∫–æ–º–ø–∞–∫—Ç–µ–µ
    // –µ—Å–ª–∏ —ç—Ç–æ –∂–≥—É—á–∏–π –ø—É—Ö, —Ç–æ –∏–¥—Ç–∏ –Ω–∞–¥–æ –º–µ–¥–ª–µ–Ω–Ω–æ
    const artList: Artifacts[] = await this.artifactsRepository.find();
    const randArt: Artifacts = this.appService.getRandomElInArr(artList);
    await ctx.reply(
      `–í—ã –≤–æ–∑–ª–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞: "${randArt.name}". –ù—É–∂–Ω–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–µ—Ä–µ—Ç—å –≤ –∫–æ—Ä–æ–±. –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–∫—Ä—ã—Ç–∏—è –∫—Ä–∞–π–Ω–µ –≤–∞–∂–µ–Ω.`,
      Markup.inlineKeyboard([
        Markup.button.callback(
          '–í—ã–±–æ—Ä –∫–æ—Ä–æ–±–∞.',
          'artifactXXX' + randArt.anomaly,
        ),
      ]),
    );
  }

  @Action(/artifactXXX.*/gim)
  async onChoose(@Ctx() ctx: TelegrafContext, @Next() next: NextFunction) {
    const match = ctx.match[0];
    if (!match) next();
    const anomalyId = +match.split('XXX')[1]; // chapterXXX1
    const anomalyAll: Anomalies[] = await this.anomaliesRepository.find();
    const anomalyTarget: Anomalies = anomalyAll.filter(
      (item) => item.id === anomalyId,
    )[0];
    const anomalyEffects = Array.from(
      new Set(anomalyAll.map((item) => item.effects)),
    );
    // const telegram_id: number =
    // ctx?.message?.from.id || ctx?.callbackQuery?.from?.id;
    // const user: Users = await this.usersRepository.findOne({
    // where: { telegram_id: telegram_id },
    // });
    await ctx.reply(
      `–ê–Ω–æ–º–∞–ª–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: ${anomalyTarget.name}`,
      Markup.inlineKeyboard(
        [
          ...anomalyEffects.map((anomalyItem) =>
            Markup.button.callback(
              anomalyItem,
              anomalyItem === anomalyTarget.effects
                ? 'anomalyTrue'
                : 'anomalyFalse',
            ),
          ),
          Markup.button.callback('üçî–ú–µ–Ω—é', 'menu'),
        ],
        {
          columns: 1,
        },
      ),
    );
  }

  @Action('anomalyTrue')
  async anomalyTrue(@Ctx() ctx: TelegrafContext) {
    const wayTotal = Math.random() * 100;
    if (wayTotal >= 60) {
      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ, –∫–æ—Ä–æ–± –ø–æ–¥–æ—à–µ–ª, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤–µ–¥–µ—Ç —Å–µ–±—è —Å—Ç–∞–±–∏–ª—å–Ω–æ.');
      await ctx.scene.leave();
    } else {
      await ctx.reply(
        '–û—Ç–ª–∏—á–Ω–æ, –∫–æ—Ä–æ–± –ø–æ–¥–æ—à–µ–ª, –Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –±—ã–ª –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω –∏ –∏—Å—Å—è–∫.',
        // Markup.inlineKeyboard([Markup.button.callback('üçî–ú–µ–Ω—é', 'menu')]),
      );
      await ctx.scene.leave();
    }
  }

  @Action('anomalyFalse')
  async anomalyFalse(@Ctx() ctx: TelegrafContext) {
    await ctx.reply(
      '–ö–æ—Ä–æ–± –Ω–µ –ø–æ–¥–æ—à–µ–ª, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω.',
      Markup.inlineKeyboard([Markup.button.callback('üçî–ú–µ–Ω—é', 'menu')]),
    );
    await ctx.scene.leave();
  }

  @Action('leave')
  async onLeaveCommand(@Ctx() ctx: Scenes.SceneContext) {
    await ctx.scene.leave();
    // await ctx.scene.enter(ScenesEnum.QUEST);
  }

  @SceneLeave()
  async onSceneLeave(@Ctx() ctx: Scenes.SceneContext) {
    await ctx.reply(
      '–ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.',
      Markup.inlineKeyboard([Markup.button.callback('üçî–ú–µ–Ω—é', 'menu')]),
    );
  }
}
