import { Logger } from '@nestjs/common';
import { NextFunction } from 'express';
import {
  Scene,
  SceneEnter,
  Ctx,
  Action,
  Next,
  InjectBot,
} from 'nestjs-telegraf';
import { AppService } from 'src/app.service';
import { PlayerDataDto } from 'src/common/player-data.dto';
import { ChaptersEntity } from 'src/database/entities/chapters.entity';
import { LocationsEntity } from 'src/database/entities/locations.entity';
import { RoadsEntity } from 'src/database/entities/roads.entity';
import { Markup, Scenes, Telegraf } from 'telegraf';
import { TelegrafContext } from '../interfaces/telegraf-context.interface';
import { ScenesEnum } from './enums/scenes.enum';

// –≥–∞–Ω–≥ –∫–∞—Ä—Å
// –Ω–∞–±–∏—Ä–∞–µ—à—å —Ç–∏–º—É, –∫–∞—Ç–∞–µ—à—å—Å—è –ø–æ —Ä–∞–π–æ–Ω—É –∏ –æ—Ç—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—à—å –Ω–∞—Ä–∫–æ–º–∞—Ñ–∏—é
// —Ü–µ–ª—å –∏–≥—Ä—ã - —Å–æ–±—Ä–∞—Ç—å —Ç–∏–º—É, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—à–∫–∏, –Ω–∞–Ω–∏–º–∞—Ç—å –Ω–æ—Ä–º–∞ –≤–æ–¥–∏—Ç–µ–ª—è
// –∞–≤—Ç–æ –º–æ–≥—É—Ç —Ç–æ—Ä–º–æ–∑–∏—Ç—å, –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞—Ç—å, –≥–æ–Ω—è—Ç—å—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
// –º–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –ø–æ—Ç—Ä—É–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ —Ä–µ–π–¥—ã –±—É–¥—É—á–∏ –¥–æ–º–∞
// —Å–¥–µ–ª–∞—Ç—å —Ä–∞–π–æ–Ω –±–æ–≥–∞—á–µ - –Ω–æ–≤–∞—è –º–∏—Å—Å–∏—è
// —á–µ–º –±–æ–≥–∞—á–µ –∏ —É–º–Ω–µ–µ —Ä–∞–π–æ–Ω, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–º–æ—á–µ–∫ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç—ã

@Scene(ScenesEnum.SCENE_LOCATION)
export class LocationScene {
  private readonly logger = new Logger(LocationScene.name);

  constructor(
    @InjectBot() private bot: Telegraf<Scenes.SceneContext>,
    private readonly appService: AppService,
  ) {}

  /**
   * –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É
   * –ü–æ–∫–∞–∑ –º–µ—Å—Ç, –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
   * @param ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   */
  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: TelegrafContext) {
    const playerData: PlayerDataDto = await this.appService.getStorePlayerData(
      ctx,
    );
    const roads: RoadsEntity[] = await this.appService.getRoadList(
      playerData.playerLocation.location,
    );
    const nextLocations: LocationsEntity[] = [];
    for await (const road of roads) {
      const locationsItem: LocationsEntity = await this.appService.getLocation(
        road.to,
      );
      nextLocations.push(locationsItem);
    }
    const keyboard = Markup.inlineKeyboard(
      [
        ...nextLocations.map((locationItem) =>
          Markup.button.callback(
            locationItem?.location,
            'locationsXXX' + locationItem.location.toString(),
          ),
        ),
        Markup.button.callback('üìç–û—Å—Ç–∞—Ç—å—Å—è –∑–¥–µ—Å—å', 'leave'),
      ],
      {
        columns: 1,
      },
    ).reply_markup;
    await this.appService.updateDisplay(
      playerData.playerProgress,
      null,
      `üèÉ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ...`,
      'https://sun9-23.userapi.com/impg/BerBvhk0PaC29WoXTFWTf49Fa-G_ktt1OXe7Ng/53JM42xkeeo.jpg?size=1920x855&quality=95&sign=1bc2fed9648961b2d332a7c6d42c8555&type=album',
    );
    await this.appService.sleep(Math.random() * 1500);
    await this.appService.updateDisplay(
      playerData.playerProgress,
      keyboard,
      `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏: "${playerData.playerLocation.location}". –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?`,
      playerData.playerLocation.image,
    );
  }

  @Action('alert')
  async onChox(@Ctx() ctx: TelegrafContext, @Next() next: NextFunction) {
    ctx.reply('awdaw');
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏—é
   * @param ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
   * @param next - –æ–±—ä–µ–∫—Ç –∏–∑ express, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª–µ–µ –ø–æ —Å—Ü–µ–Ω–µ
   * @returns
   */
  @Action(/locationsXXX.*/gim)
  async onChoose(@Ctx() ctx: TelegrafContext, @Next() next: NextFunction) {
    const match = ctx.match[0];
    if (!match) next();
    const locationCode: string = match.split('XXX')[1]; // locationsXXX
    const playerData: PlayerDataDto = await this.appService.getStorePlayerData(
      ctx,
    );
    const location: LocationsEntity = await this.appService.getLocation(
      locationCode,
    );
    await ctx.answerCbQuery(
      `–í –¥–æ—Ä–æ–≥–µ –≤–∞–º —Å—Ç–∞–ª–æ –ª–µ–≥—á–µ, ${playerData.player.will} + 10 –≤–æ–ª–∏.`,
      {
        show_alert: false,
        cache_time: 500,
      },
    );
    playerData.player.will += 10;
    ctx.scene.state[playerData.player.telegram_id] =
      await this.appService.updateStorePlayerLocation(ctx, {
        ...playerData.player,
        location: location.location,
      });
    const nextChapter = await this.appService.getChapterByCode(
      playerData.playerProgress.chapter_code,
    );
    const isBattle = this.chooseBattleByLocation(
      ctx,
      location.location,
      nextChapter,
    );
    if (isBattle) return isBattle;
    ctx.scene.reenter();
  }

  chooseBattleByLocation(ctx: TelegrafContext, location: string, nextChapter) {
    if (
      location.includes('(–±–∞–Ω–¥–∏—Ç—ã)') &&
      nextChapter?.character === '–ë–∞–Ω–¥–∏—Ç—ã (–≤—Ä–∞–≥–∏)'
    ) {
      return ctx.scene.enter(ScenesEnum.SCENE_BATTLE);
    }
    if (location.includes('(–±–∞–Ω–¥–∏—Ç—ã)')) {
      return ctx.scene.enter(ScenesEnum.SCENE_BATTLE);
    }
    if (location.includes('(–∞—Ä–º–∏—è)')) {
      return ctx.scene.enter(ScenesEnum.SCENE_BATTLE);
    }
    if (location.includes('(–º–æ–Ω–æ–ª–∏—Ç)')) {
      return ctx.scene.enter(ScenesEnum.SCENE_BATTLE);
    }
    if (location.includes('(–∑–æ–º–±–∏)')) {
      return ctx.scene.enter(ScenesEnum.SCENE_BATTLE);
    }
  }

  @Action('leave')
  async onLeaveCommand(@Ctx() ctx: TelegrafContext) {
    await ctx.scene.leave();
    const playerData: PlayerDataDto = await this.appService.getStorePlayerData(
      ctx,
    );
    const chapterNext: ChaptersEntity = await this.appService.getNextChapter(
      playerData,
    );
    const keyboard = Markup.inlineKeyboard(
      [
        Markup.button.callback('üìç–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ', ScenesEnum.SCENE_LOCATION),
        // Markup.button.callback('‚ò†Ô∏è–ë–∞–Ω–¥–∏—Ç—ã', ScenesEnum.SCENE_BANDIT),
        Markup.button.callback('üìüPDA', ScenesEnum.SCENE_PDA),
        Markup.button.callback(
          '‚ò¢Ô∏è–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
          ScenesEnum.SCENE_QUEST,
          !!!chapterNext,
        ),
      ],
      {
        columns: 1,
      },
    ).reply_markup;
    this.appService.updateDisplay(
      playerData?.playerProgress,
      keyboard,
      this.appService.escapeText(
        `–í—ã –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: ${playerData?.playerLocation?.location}.`,
      ),
      playerData?.playerLocation?.image,
    );
  }
}
