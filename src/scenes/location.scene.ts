import { Inject, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { NextFunction } from 'express';
import {
  Scene,
  SceneEnter,
  SceneLeave,
  Command,
  Hears,
  Ctx,
  Action,
  TELEGRAF_STAGE,
  Next,
  Use,
} from 'nestjs-telegraf';
import { AppService } from 'src/app.service';
import { Anomalies } from 'src/user/entities/anomalies.entity';
import { Artifacts } from 'src/user/entities/artifacts.entity';
import { ChaptersEntity } from 'src/user/entities/chapters.entity';
import { ChoicesEntity } from 'src/user/entities/choices.entity';
import { InventoryItems } from 'src/user/entities/inventory_items.entity';
import { LocationsEntity } from 'src/user/entities/locations.entity';
import { ProgressEntity } from 'src/user/entities/progress.entity';
import { RoadsEntity } from 'src/user/entities/roads.entity';
import { UsersEntity } from 'src/user/entities/users.entity';
import { Markup, Scenes } from 'telegraf';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';
import { Like, Repository } from 'typeorm';
import { TelegrafContext } from '../interfaces/telegraf-context.interface';
import { ActivityEnum } from './enums/activity.enum';
import { ScenesEnum } from './enums/scenes.enum';

// –≥–∞–Ω–≥ –∫–∞—Ä—Å
// –Ω–∞–±–∏—Ä–∞–µ—à—å —Ç–∏–º—É, –∫–∞—Ç–∞–µ—à—å—Å—è –ø–æ —Ä–∞–π–æ–Ω—É –∏ –æ—Ç—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—à—å –Ω–∞—Ä–∫–æ–º–∞—Ñ–∏—é
// —Ü–µ–ª—å –∏–≥—Ä—ã - —Å–æ–±—Ä–∞—Ç—å —Ç–∏–º—É, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—à–∫–∏, –Ω–∞–Ω–∏–º–∞—Ç—å –Ω–æ—Ä–º–∞ –≤–æ–¥–∏—Ç–µ–ª—è
// –∞–≤—Ç–æ –º–æ–≥—É—Ç —Ç–æ—Ä–º–æ–∑–∏—Ç—å, –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞—Ç—å, –≥–æ–Ω—è—Ç—å—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
// –º–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –ø–æ—Ç—Ä—É–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ —Ä–µ–π–¥—ã –±—É–¥—É—á–∏ –¥–æ–º–∞
// —Å–¥–µ–ª–∞—Ç—å —Ä–∞–π–æ–Ω –±–æ–≥–∞—á–µ - –Ω–æ–≤–∞—è –º–∏—Å—Å–∏—è
// —á–µ–º –±–æ–≥–∞—á–µ –∏ —É–º–Ω–µ–µ —Ä–∞–π–æ–Ω, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–º–æ—á–µ–∫ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç—ã

@Scene(ScenesEnum.LOCATION)
export class LocationScene {
  private readonly logger = new Logger(LocationScene.name);

  constructor(
    private readonly appService: AppService,
    @InjectRepository(UsersEntity)
    private readonly usersRepository: Repository<UsersEntity>,
    @InjectRepository(ChaptersEntity)
    private readonly chaptersRepository: Repository<ChaptersEntity>,
    @InjectRepository(ChoicesEntity)
    private readonly choicesRepository: Repository<ChoicesEntity>,
    @InjectRepository(ProgressEntity)
    private readonly progressRepository: Repository<ProgressEntity>,
    @InjectRepository(InventoryItems)
    private readonly inventoryItemsRepository: Repository<InventoryItems>,
    @InjectRepository(Artifacts)
    private readonly artifactsRepository: Repository<Artifacts>,
    @InjectRepository(Anomalies)
    private readonly anomaliesRepository: Repository<Anomalies>,
    @InjectRepository(LocationsEntity)
    private readonly locationsRepository: Repository<LocationsEntity>,
    @InjectRepository(RoadsEntity)
    private readonly roadsRepository: Repository<RoadsEntity>,
  ) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: TelegrafContext) {
    const telegram_id: number =
      ctx?.message?.from.id || ctx?.callbackQuery?.from?.id;
    const user: UsersEntity = await this.usersRepository.findOne({
      where: { telegram_id: telegram_id },
    });
    const progress: ProgressEntity = await this.progressRepository.findOne({
      where: {
        user_id: user.id,
      },
    });
    const location: LocationsEntity = await this.locationsRepository.findOne({
      where: { location: user.location },
    });
    const roads: RoadsEntity[] = await this.roadsRepository.find({
      where: { from: user.location },
    });
    const nextLocations: LocationsEntity[] = [];
    for await (const road of roads) {
      const locationsItem = await this.locationsRepository.findOne({
        where: { location: road.to },
      });
      nextLocations.push(locationsItem);
    }
    const keyboard = Markup.inlineKeyboard(
      [
        ...nextLocations.map((locationItem) =>
          Markup.button.callback(
            locationItem?.location,
            'locationsXXX' + locationItem.location.toString(),
          ),
        ),
        Markup.button.callback('üìç–û—Å—Ç–∞—Ç—å—Å—è –∑–¥–µ—Å—å', 'leave'),
      ],
      {
        columns: 1,
      },
    ).reply_markup;
    await this.appService.updateDisplay(
      progress,
      keyboard,
      `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏: "${location.location}". –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?`,
      location.image,
    );
  }

  @Action(/locationsXXX.*/gim)
  async onChoose(@Ctx() ctx: TelegrafContext, @Next() next: NextFunction) {
    const match = ctx.match[0];
    if (!match) next();
    const locationCode: string = match.split('XXX')[1]; // locationsXXX
    const location: LocationsEntity = await this.locationsRepository.findOne({
      where: { location: locationCode },
    });
    const telegram_id: number =
      ctx?.message?.from.id || ctx?.callbackQuery?.from?.id;
    const user: UsersEntity = await this.usersRepository.findOne({
      where: { telegram_id: telegram_id },
    });
    await this.usersRepository.update(
      { id: user.id },
      { location: location.location || locationCode },
    );
    await ctx.scene.reenter();
  }

  @Action('leave')
  async onLeaveCommand(@Ctx() ctx: Scenes.SceneContext) {
    await ctx.scene.leave();
  }

  @SceneLeave()
  async onSceneLeave(@Ctx() ctx: Scenes.SceneContext) {
    const telegram_id: number =
      ctx?.message?.from.id || ctx?.callbackQuery?.from?.id;
    const user: UsersEntity = await this.usersRepository.findOne({
      where: { telegram_id: telegram_id },
    });
    const progress: ProgressEntity = await this.progressRepository.findOne({
      where: {
        user_id: user.id,
      },
    });
    const location: LocationsEntity = await this.locationsRepository.findOne({
      where: { location: user.location },
    });
    const keyboard = Markup.inlineKeyboard([
      Markup.button.callback('–ú–µ–Ω—é', 'menu'),
    ]).reply_markup;
    await this.appService.updateDisplay(
      progress,
      keyboard,
      `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`,
      location?.image,
    );
  }
}
