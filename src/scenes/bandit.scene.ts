import { Logger } from '@nestjs/common';
import { Scene, SceneEnter, Ctx, Action } from 'nestjs-telegraf';
import { AppService } from 'src/app.service';
import {
  GunInterface,
  NpcObj,
  PlayerDataDto,
} from 'src/common/player-data.dto';
import { Markup, Scenes } from 'telegraf';
import { TelegrafContext } from '../interfaces/telegraf-context.interface';
import { ScenesEnum } from './enums/scenes.enum';

// –≥–∞–Ω–≥ –∫–∞—Ä—Å
// –Ω–∞–±–∏—Ä–∞–µ—à—å —Ç–∏–º—É, –∫–∞—Ç–∞–µ—à—å—Å—è –ø–æ —Ä–∞–π–æ–Ω—É –∏ –æ—Ç—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—à—å –Ω–∞—Ä–∫–æ–º–∞—Ñ–∏—é
// —Ü–µ–ª—å –∏–≥—Ä—ã - —Å–æ–±—Ä–∞—Ç—å —Ç–∏–º—É, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—à–∫–∏, –Ω–∞–Ω–∏–º–∞—Ç—å –Ω–æ—Ä–º–∞ –≤–æ–¥–∏—Ç–µ–ª—è
// –∞–≤—Ç–æ –º–æ–≥—É—Ç —Ç–æ—Ä–º–æ–∑–∏—Ç—å, –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞—Ç—å, –≥–æ–Ω—è—Ç—å—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
// –º–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –ø–æ—Ç—Ä—É–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ —Ä–µ–π–¥—ã –±—É–¥—É—á–∏ –¥–æ–º–∞
// —Å–¥–µ–ª–∞—Ç—å —Ä–∞–π–æ–Ω –±–æ–≥–∞—á–µ - –Ω–æ–≤–∞—è –º–∏—Å—Å–∏—è
// —á–µ–º –±–æ–≥–∞—á–µ –∏ —É–º–Ω–µ–µ —Ä–∞–π–æ–Ω, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–º–æ—á–µ–∫ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç—ã

@Scene(ScenesEnum.SCENE_BANDIT)
export class BanditScene {
  private readonly logger = new Logger(BanditScene.name);

  private readonly navigationKeyboard = [
    Markup.button.callback('‚¨ÜÔ∏è50m', 'moveXXX' + '‚¨ÜÔ∏è'),
    Markup.button.callback('‚¨ÖÔ∏è50m', 'moveXXX' + '‚¨ÖÔ∏è'),
    Markup.button.callback('‚¨áÔ∏è50m', 'moveXXX' + '‚¨áÔ∏è'),
    Markup.button.callback('‚û°Ô∏è50m', 'moveXXX' + '‚û°Ô∏è'),
  ];

  constructor(private readonly appService: AppService) {}

  calculateDamageForGun(gun: GunInterface, distance: number) {
    return Math.max(
      Math.floor(
        gun.base_damage -
          (((Math.abs(gun.optimal_distance - distance) / 15) *
            gun.optimal_modifier) /
            100) **
            2,
      ),
      0,
    );
  }

  calculateSpreadForGun(gun: GunInterface, distance: number) {
    return (
      100 -
      Math.max(
        Math.floor(
          gun.base_damage -
            (Math.abs(gun.optimal_distance - distance) / 30) ** 2,
        ),
        0,
      )
    );
  }

  calculateDistance(
    posOne: { x: number; y: number },
    posTwo: { x: number; y: number },
  ): number {
    const deltaX = posTwo.x - posOne.x;
    const deltaY = posTwo.y - posOne.y;
    return Math.floor(Math.sqrt(deltaX * deltaX + deltaY * deltaY)) + 1;
  }

  calculateSpreadByRounds(shotsPrev, distance) {
    if (distance > 2000) return 100;
    const spread = Math.floor(shotsPrev * distance ** 0.6);
    if (spread >= 100) return 100;
    return spread;
  }

  calculateDamage(distance: number, damage: number): number {
    const calcDamage = damage - (distance / 50) ** 2 + Math.random() * 5 - 5;
    if (calcDamage <= 0) return 0;
    return Math.floor(calcDamage);
  }

  formatCoord(coord: number): string {
    const coordLen = coord.toString().length;
    // const toLen = 5;
    // return '_'.repeat(toLen - coordLen) + coord.toString();
    return coord.toString();
  }

  moveEnemyByGun(player: NpcObj, enemy: NpcObj): NpcObj {
    const diffDistance = this.calculateDistance(
      enemy.position,
      player.position,
    );
    const posXDiff = enemy.position.x - player.position.x;
    const posYDiff = enemy.position.y - player.position.y;
    const posXPositive = Math.abs(posXDiff);
    const posYPositive = Math.abs(posYDiff);
    const moveXDist = posXPositive >= 20 ? 20 : posXPositive;
    const moveYDist = posYPositive >= 20 ? 20 : posYPositive;
    if (diffDistance > enemy.gun.optimal_distance) {
      enemy.position.x += posXDiff >= 0 ? -1 * moveXDist : moveXDist;
      enemy.position.y += posYDiff >= 0 ? -1 * moveYDist : moveYDist;
    } else {
      enemy.position.x += posXDiff >= 0 ? moveXDist : -1 * moveXDist;
      enemy.position.y += posYDiff >= 0 ? moveYDist : -1 * moveYDist;
    }
    return enemy;
  }

  @Action(/^attackXXX.*/gim)
  async attackEnemy(@Ctx() ctx: TelegrafContext) {
    // @ts-ignore
    const match = ctx.match[0];
    const enemyName: string = match.split('XXX')[1];
    const storePlayerData: PlayerDataDto =
      await this.appService.getStorePlayerData(ctx);
    let text = '';
    let battleData: PlayerDataDto = await this.appService.getBattle(ctx);
    const currentEnemy: NpcObj = battleData.battle.enemyList.filter(
      (item) => item.name === enemyName,
    )[0];
    const currentEnemyIndex: number = battleData.battle.enemyList.findIndex(
      (item) => item.name === enemyName,
    );
    if (!currentEnemy) ctx.scene.reenter();
    const distance: number = this.calculateDistance(
      battleData.battle.battlePlayer.position,
      currentEnemy.position,
    );
    const playerDamage: number = this.calculateDamageForGun(
      battleData.battle.battlePlayer.gun,
      distance,
    );
    const enemyDamage: number = this.calculateDamageForGun(
      currentEnemy.gun,
      distance,
    );
    const playerSpread: number = this.calculateSpreadForGun(
      battleData.battle.battlePlayer.gun,
      distance,
    );
    const enemySpread: number = this.calculateSpreadForGun(
      currentEnemy.gun,
      distance,
    );
    const isSuccessAttack: boolean = Math.random() * 100 > playerSpread;
    if (isSuccessAttack) {
      text += `–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ ${currentEnemy.name} –ø–æ–ª—É—á–∏–ª —Ä–∞–Ω–µ–Ω–∏—è –æ—Ç '${battleData.battle.battlePlayer.gun.name}' ${playerDamage}hp –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${distance}m.\n`;
      currentEnemy.health = currentEnemy.health - playerDamage;
      if (currentEnemy.health <= 0) {
        currentEnemy.isAlive = false;
        text += `${currentEnemy.name} –±–æ–ª–µ–µ –Ω–µ –æ–ø–∞—Å–µ–Ω\n`;
      } else {
        text += `–£ ${currentEnemy.name} –æ—Å—Ç–∞–ª–æ—Å—å ${currentEnemy.health}hp\n`;
      }
      battleData.battle.enemyList[currentEnemyIndex] = currentEnemy;
      ctx.scene.state[storePlayerData.player.telegram_id].enemyList =
        battleData.battle.enemyList;
    }
    if (!isSuccessAttack) {
      text += `–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ ${
        currentEnemy.name
      } –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${distance}m. –®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è ${
        100 - playerSpread
      }%.\n`;
      text += `–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å –ø–æ —Ü–µ–ª–∏: ${currentEnemy.name}\n`;
    }
    const isSuccessCounterAttack: boolean = Math.random() * 100 > enemySpread;
    if (isSuccessCounterAttack) {
      text += `\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ ${currentEnemy.name} –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ –≤–∞—Å –≤ –æ—Ç–≤–µ—Ç –∏–∑ '${currentEnemy.gun.name}' ${enemyDamage}hp –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${distance}m.\n`;
      battleData.battle.battlePlayer.health =
        battleData.battle.battlePlayer.health - enemyDamage;
      if (battleData.battle.battlePlayer.health <= 0) {
        battleData.battle.battlePlayer.isAlive = false;
        text += `–£—â–µ—Ä–± –±—ã–ª –ª–µ—Ç–∞–ª—å–Ω—ã–º\n`;
      }
      if (battleData.battle.battlePlayer.health > 0) {
        text += `–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${battleData.battle.battlePlayer.health}hp\n`;
      }
    }
    if (!isSuccessCounterAttack) {
      text += `–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è\n`;
    }
    let keyboard = null;
    await this.appService.updateBattleEnemyList(
      ctx,
      battleData.battle.enemyList.filter((enemy) => enemy.isAlive),
    );
    battleData = await this.appService.getBattle(ctx);
    const allEnemyIsDead: boolean =
      battleData.battle.enemyList.filter((item) => item.isAlive).length === 0;
    if (allEnemyIsDead && battleData.battle.battlePlayer.health >= 0) {
      text += '–í—Å–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã. –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, —Å—Ç–∞–ª–∫–µ—Ä';
      keyboard = Markup.inlineKeyboard([
        Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', ScenesEnum.SCENE_QUEST),
      ]).reply_markup;
    }
    if (!allEnemyIsDead && battleData.battle.battlePlayer.health >= 0) {
      keyboard = Markup.inlineKeyboard(
        [
          ...this.navigationKeyboard,
          // –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞—Ç–∞–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          ...battleData.battle.enemyList
            .filter((enemy) => enemy.isAlive)
            .map((enemyItem) =>
              Markup.button.callback(
                'üéØ' + enemyItem.name,
                'attackXXX' + enemyItem.name,
              ),
            ),
        ],
        {
          columns: 2,
        },
      ).reply_markup;
    }
    if (battleData.battle.battlePlayer.health <= 0) {
      text += '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏. –ó–æ–Ω–∞ –∑–∞–±—Ä–∞–ª–∞ –≤–∞—Å';
      keyboard = Markup.inlineKeyboard([
        Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', ScenesEnum.SCENE_QUEST),
      ]).reply_markup;
    }
    this.appService.updateDisplay(
      storePlayerData.playerProgress,
      keyboard,
      text,
      storePlayerData?.playerLocation?.image,
    );
  }

  @Action(/^moveXXX.*/gim)
  async onMove(@Ctx() ctx: TelegrafContext) {
    // @ts-ignore
    const match = ctx.match[0];
    const direction: string = match.split('XXX')[1];
    if (!direction) {
      await ctx.scene.enter(ScenesEnum.SCENE_QUEST);
    }
    let battleData = await this.appService.getBattle(ctx);
    let log = `–í—ã –ø–µ—Ä–µ–¥–≤–∏–Ω—É–ª–∏—Å—å ${direction} –Ω–∞ 50m.\n\n`;
    await this.appService.updateBattleEnemyList(
      ctx,
      battleData.battle.enemyList,
    );
    if (direction === '‚¨ÜÔ∏è')
      battleData.battle.battlePlayer.position.y =
        battleData.battle.battlePlayer.position.y + 50;
    if (direction === '‚¨áÔ∏è')
      battleData.battle.battlePlayer.position.y =
        battleData.battle.battlePlayer.position.y - 50;
    if (direction === '‚¨ÖÔ∏è')
      battleData.battle.battlePlayer.position.x =
        battleData.battle.battlePlayer.position.x - 50;
    if (direction === '‚û°Ô∏è')
      battleData.battle.battlePlayer.position.x =
        battleData.battle.battlePlayer.position.x + 50;
    battleData.battle.battlePlayer = await this.appService.updateBattlePlayer(
      ctx,
      battleData.battle.battlePlayer,
    );
    // log += '–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n';
    // log += `‚ÜïÔ∏è ${this.formatCoord(
    //   battleData.battle.battlePlayer.position.y,
    // )}m, `;
    // log += `‚ÜîÔ∏è ${this.formatCoord(
    //   battleData.battle.battlePlayer.position.x,
    // )}m\n`;
    log += `–£ –≤–∞—Å –≤ —Ä—É–∫–∞—Ö ${battleData.battle.battlePlayer.gun.name}. –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è, —á—Ç–æ–±—ã —Å–ø—É—Å—Ç–∏—Ç—å –∫—É—Ä–æ–∫ ${battleData.battle.battlePlayer.gun.optimal_distance}m.\n`;
    await this.appService.updateBattleEnemyList(
      ctx,
      battleData.battle.enemyList.map((enemy) =>
        this.moveEnemyByGun(battleData.battle.battlePlayer, enemy),
      ),
    );
    battleData = await this.appService.getBattle(ctx);
    const enemyAway = battleData.battle.enemyList.filter((enemy) => {
      const dist = this.calculateDistance(
        battleData.battle.battlePlayer.position,
        enemy.position,
      );
      console.log('playerPos', battleData.battle.battlePlayer.position);
      console.log('enemy_Pos', enemy.position);
      console.log('distance:', dist);
      return dist <= 500;
    });
    if (enemyAway.length === 0) {
      const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('–°–±–µ–∂–∞—Ç—å', 'leave'),
      ]).reply_markup;
      this.appService.updateDisplay(
        battleData.playerProgress,
        keyboard,
        '–í—ã —É—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–ª–µ–∫–æ',
        battleData?.playerLocation?.image,
      );
      // await ctx.scene.enter(ScenesEnum.SCENE_QUEST);
    }
    if (enemyAway.length !== 0) {
      const keyboard = Markup.inlineKeyboard(
        [
          ...this.navigationKeyboard,
          // –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞—Ç–∞–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          ...battleData.battle.enemyList
            .filter((enemy) => enemy.isAlive)
            .map((enemyItem) =>
              Markup.button.callback(
                'üéØ' + enemyItem.name,
                'attackXXX' + enemyItem.name,
              ),
            ),
        ],
        {
          columns: 2,
        },
      ).reply_markup;
      log +=
        this.getEnemiesPositions(
          battleData.battle.enemyList,
          battleData.battle.battlePlayer,
        ) + '\n';
      this.appService.updateDisplay(
        battleData.playerProgress,
        keyboard,
        log,
        'https://sun9-2.userapi.com/impg/8D9R-PqX4qIvNk1r7FQ4eP1KfPiWcUJFoN3uRw/B7-a2BJJtC4.jpg?size=700x538&quality=95&sign=becda26a8a3aad44cb19b373ddaa84e8&type=album',
      );
    }
  }

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: TelegrafContext) {
    const playerData: PlayerDataDto = await this.appService.getStorePlayerData(
      ctx,
    );
    const battleData: PlayerDataDto = await this.appService.createBattle(ctx);
    const keyboard = Markup.inlineKeyboard(
      [
        ...this.navigationKeyboard,
        // –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞—Ç–∞–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        ...battleData.battle.enemyList
          .filter((enemy) => enemy.isAlive)
          .map((enemyItem) =>
            Markup.button.callback(
              'üéØ' + enemyItem.name,
              'attackXXX' + enemyItem.name,
            ),
          ),
      ],
      {
        columns: 2,
      },
    ).reply_markup;
    let log = `–í–∞–º –Ω–∞ –ø—É—Ç–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ - ${battleData.battle.enemyList[0].group}. –ù–∞—á–∞–ª–∞—Å—å –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∞. –ß—Ç–æ–±—ã —Å–±–µ–∂–∞—Ç—å –æ—Ç–¥–∞–ª–∏—Ç–µ—Å—å –Ω–∞ 500–º. \n`;

    // log += '–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n';
    // log += `‚ÜïÔ∏è ${this.formatCoord(
    //   battleData.battle.battlePlayer.position.y,
    // )}m, `;
    // log += `‚ÜîÔ∏è ${this.formatCoord(
    //   battleData.battle.battlePlayer.position.x,
    // )}m\n`;
    log += `–£ –≤–∞—Å –≤ —Ä—É–∫–∞—Ö ${battleData.battle.battlePlayer.gun.name}. –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è, —á—Ç–æ–±—ã —Å–ø—É—Å—Ç–∏—Ç—å –∫—É—Ä–æ–∫ ${battleData.battle.battlePlayer.gun.optimal_distance}m.`;
    log += this.getEnemiesPositions(
      battleData.battle.enemyList,
      battleData.battle.battlePlayer,
    );
    this.appService.updateDisplay(
      playerData.playerProgress,
      keyboard,
      log,
      playerData?.playerLocation?.image,
    );
  }

  getEnemiesPositions(enemyList: NpcObj[], player): string {
    let text = '\n';
    let enemyPosText = '';
    for (let i = 0; i < enemyList.length; i++) {
      const enemy: NpcObj = enemyList[i];
      const distance = this.calculateDistance(player.position, enemy.position);
      const difX = enemy.position.x - player.position.x;
      const difY = enemy.position.y - player.position.y;
      const xSmile = difX == 0 ? '‚ÜîÔ∏è' : difX < 0 ? '‚¨ÖÔ∏èÔ∏è' : '‚û°Ô∏è';
      const ySmile = difY == 0 ? '‚ÜïÔ∏è' : difY < 0 ? '‚¨áÔ∏è' : '‚¨ÜÔ∏è';
      enemyPosText += `\n${xSmile} ${this.formatCoord(Math.abs(difX))}m,`;
      enemyPosText += `  ${ySmile} ${this.formatCoord(Math.abs(difY))}m`;
      enemyPosText += ` - –æ—Ç–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–∞ ${enemy.name}.\n–û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ üèÉ ${distance}m.\n`;
      enemyPosText += `–í —Ä—É–∫–∞—Ö —É –Ω–µ–≥–æ ${enemy.gun.name}.\n–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –µ–≥–æ —Å—Ç—Ä–µ–ª—å–±—ã ${enemy.gun.optimal_distance}m.\n`;
      text += enemyPosText;
      enemyPosText = '';
    }
    return text;
  }

  @Action('leave')
  async onLeaveCommand(@Ctx() ctx: TelegrafContext) {
    await ctx.scene.enter(ScenesEnum.SCENE_QUEST);
  }

  @Action(/^scene.*/gim)
  async enterBanditScene(@Ctx() ctx: Scenes.SceneContext) {
    // @ts-ignore
    const match = ctx.match[0];
    if (match) {
      const scene: ScenesEnum = match;
      await ctx.scene.enter(scene);
    }
  }
}
