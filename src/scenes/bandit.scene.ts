import { Logger } from '@nestjs/common';
import { Scene, SceneEnter, Ctx, Action } from 'nestjs-telegraf';
import { AppService } from 'src/app.service';
import { EnemyObj, PlayerDataDto } from 'src/common/player-data.dto';
import { Markup, Scenes } from 'telegraf';
import { TelegrafContext } from '../interfaces/telegraf-context.interface';
import { ScenesEnum } from './enums/scenes.enum';

// –≥–∞–Ω–≥ –∫–∞—Ä—Å
// –Ω–∞–±–∏—Ä–∞–µ—à—å —Ç–∏–º—É, –∫–∞—Ç–∞–µ—à—å—Å—è –ø–æ —Ä–∞–π–æ–Ω—É –∏ –æ—Ç—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—à—å –Ω–∞—Ä–∫–æ–º–∞—Ñ–∏—é
// —Ü–µ–ª—å –∏–≥—Ä—ã - —Å–æ–±—Ä–∞—Ç—å —Ç–∏–º—É, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—É—à–∫–∏, –Ω–∞–Ω–∏–º–∞—Ç—å –Ω–æ—Ä–º–∞ –≤–æ–¥–∏—Ç–µ–ª—è
// –∞–≤—Ç–æ –º–æ–≥—É—Ç —Ç–æ—Ä–º–æ–∑–∏—Ç—å, –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞—Ç—å, –≥–æ–Ω—è—Ç—å—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
// –º–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –ø–æ—Ç—Ä—É–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ —Ä–µ–π–¥—ã –±—É–¥—É—á–∏ –¥–æ–º–∞
// —Å–¥–µ–ª–∞—Ç—å —Ä–∞–π–æ–Ω –±–æ–≥–∞—á–µ - –Ω–æ–≤–∞—è –º–∏—Å—Å–∏—è
// —á–µ–º –±–æ–≥–∞—á–µ –∏ —É–º–Ω–µ–µ —Ä–∞–π–æ–Ω, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–º–æ—á–µ–∫ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç—ã

@Scene(ScenesEnum.SCENE_BANDIT)
export class BanditScene {
  private readonly logger = new Logger(BanditScene.name);

  constructor(private readonly appService: AppService) {}

  calculateDistance(
    posOne: { x: number; y: number },
    posTwo: { x: number; y: number },
  ): number {
    const deltaX = posTwo.x - posOne.x;
    const deltaY = posTwo.y - posOne.y;
    return Math.floor(Math.sqrt(deltaX * deltaX + deltaY * deltaY)) + 1;
  }

  calculateSpread(shotsPrev, distance) {
    if (distance > 2000) return 100;
    const spread = Math.floor(shotsPrev * distance ** 0.6);
    if (spread >= 100) return 100;
    return spread;
  }

  generatePlayerPosition(): { x: number; y: number } {
    const x = Math.floor(Math.random() * 1000);
    const y = Math.floor(Math.random() * 1000);
    return { x, y };
  }

  calculateDamage(distance: number, damage: number): number {
    const calcDamage = damage - (distance / 50) ** 2 + Math.random() * 5 - 5;
    if (calcDamage <= 0) return 0;
    return Math.floor(calcDamage);
  }

  generateRandomEnemies(): EnemyObj[] {
    const names = [
      '–í–∞—Å—è–Ω',
      '–ñ–æ—Ä–∞',
      '–ë–æ—Ä—è–Ω',
      '–ö–æ–ª—è–Ω',
      '–°—Ç–∞—Å–∏–∫',
      '–ü–µ—Ç—Ä–æ—Å',
      '–†–æ–±–µ—Ä—Ç',
      '–ê–Ω–¥—Ä—é—Ö–∞',
      '–ê—Å—Ç–∏',
      '–ú–∞–∫—Å–æ–Ω',
      '–ú–∞–∫—Å–∞–Ω',
      '–î–µ–Ω—á–∏–∫',
      '–í–∏—Ç—è–Ω',
    ];
    const surNames = [
      '–ë–æ–±—Ä',
      '–ñ–µ—Å—Ç–∫–∏–π',
      '–ö—Ä–∏–≤–æ–π',
      '–ó–∞–Ω—É–¥–∞',
      '–ú–æ–∑–∏–ª–∞',
      '–ü–µ—Å',
      '–ì–∞–Ω–≥—Å—Ç–µ—Ä',
      '–ß–µ—Ä–Ω—ã–π',
      '–î–∏–∫–∏–π',
      '–¶–µ–ø–Ω–æ–π',
      '–®–∞–ª—å–Ω–æ–π',
      '–ó–µ–ª–µ–Ω—ã–π',
      '–ú–∞—Å–ª–∏–Ω–Ω–∏–∫',
    ];
    const enemies: EnemyObj[] = [];
    // const playersCount = Math.floor(Math.random() * 5) + 1;
    const enemiesTargetCount = Math.floor(Math.random() * 2) + 1;
    while (enemies?.length !== enemiesTargetCount) {
      const x = Math.floor(Math.random() * 200);
      const y = Math.floor(Math.random() * 200);
      const nameIndex = Math.floor(Math.random() * names?.length);
      const name = names[nameIndex];
      names.splice(nameIndex, 1);
      const surNameIndex = Math.floor(Math.random() * names?.length);
      const surName = surNames[surNameIndex];
      surNames.splice(surNameIndex, 1);
      const pogonyalo = `${name} ${surName}`;
      enemies.push({
        position: { x, y },
        name: pogonyalo,
        isAlive: true,
        health: 75,
        group: '–ë–∞–Ω–¥–∏—Ç—ã',
      });
    }
    return enemies;
  }

  @Action(/^attackXXX.*/gim)
  async attackEnemy(@Ctx() ctx: TelegrafContext) {
    // @ts-ignore
    const match = ctx.match[0];
    const enemyName: string = match.split('XXX')[1];
    const storeData: PlayerDataDto = await this.appService.getStorePlayerData(
      ctx,
    );
    const playerData: PlayerDataDto = await this.appService.getStorePlayerData(
      ctx,
    );
    let text = '';
    const enemyList: EnemyObj[] = storeData.enemyList;
    const currentEnemy: EnemyObj = enemyList.filter(
      (item) => item.name === enemyName,
    )[0];
    const currentEnemyIndex: number = enemyList.findIndex(
      (item) => item.name === enemyName,
    );
    if (!currentEnemy) ctx.scene.reenter();
    const player: EnemyObj = {
      position: { x: 50, y: 50 },
      name: 'Player',
      health: 150,
      isAlive: true,
    };
    const distance: number = this.calculateDistance(
      player.position,
      currentEnemy.position,
    );
    const damage: number = this.calculateDamage(distance, 50);
    const spread: number = this.calculateSpread(1, distance);
    console.log('spreadspread', spread);
    const isSuccessAttack: boolean = Math.random() * 100 > spread;
    console.log('isSuccessAttackisSuccessAttack', isSuccessAttack);
    if (isSuccessAttack) {
      text += `–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ ${currentEnemy.name} –ø–æ–ª—É—á–∏–ª —Ä–∞–Ω–µ–Ω–∏—è ${damage}hp –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${distance}m.\n`;
      currentEnemy.health = currentEnemy.health - damage;
      if (currentEnemy.health <= 0) {
        currentEnemy.isAlive = false;
        text += `${currentEnemy.name} –±–æ–ª–µ–µ –Ω–µ –æ–ø–∞—Å–µ–Ω\n`;
      } else {
        text += `–£ ${currentEnemy.name} –æ—Å—Ç–∞–ª–æ—Å—å ${currentEnemy.health}hp\n`;
      }
      enemyList[currentEnemyIndex] = currentEnemy;
      ctx.scene.state[playerData.player.telegram_id].enemyList = enemyList;
    }
    if (!isSuccessAttack) {
      text += `–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ ${
        currentEnemy.name
      } –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${distance}m. –®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è ${
        100 - spread
      }%.\n`;
      text += `–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å –ø–æ —Ü–µ–ª–∏: ${currentEnemy.name}\n`;
    }
    let keyboard = null;
    if (!enemyList.filter((enemy) => enemy.isAlive).length) {
      text += '–í—Å–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã. –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, —Å—Ç–∞–ª–∫–µ—Ä';
      keyboard = Markup.inlineKeyboard([
        Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', ScenesEnum.SCENE_QUEST),
      ]).reply_markup;
    } else {
      keyboard = Markup.inlineKeyboard(
        [
          // Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', 'menu'),
          Markup.button.callback('‚¨ÜÔ∏è50m', 'goBack'),
          Markup.button.callback('‚¨ÖÔ∏è50m', 'goLeft'),
          Markup.button.callback('‚¨áÔ∏è50m', 'goForward'),
          Markup.button.callback('‚û°Ô∏è50m', 'goRight'),
          // –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞—Ç–∞–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          ...ctx.scene.state[playerData.player.telegram_id].enemyList
            .filter((enemy) => enemy.isAlive)
            .map((enemyItem) =>
              Markup.button.callback(
                'üéØ' + enemyItem.name,
                'attackXXX' + enemyItem.name,
              ),
            ),
        ],
        {
          columns: 2,
        },
      ).reply_markup;
    }
    this.appService.updateDisplay(
      playerData.playerProgress,
      keyboard,
      text,
      'https://sun9-2.userapi.com/impg/8D9R-PqX4qIvNk1r7FQ4eP1KfPiWcUJFoN3uRw/B7-a2BJJtC4.jpg?size=700x538&quality=95&sign=becda26a8a3aad44cb19b373ddaa84e8&type=album',
    );
  }

  @Action(/^moveXXX.*/gim)
  async onMove(@Ctx() ctx: TelegrafContext) {
    // @ts-ignore
    const match = ctx.match[0];
    const direction: string = match.split('XXX')[1];
    if (!direction) {
      await ctx.scene.enter(ScenesEnum.SCENE_QUEST);
    }
    const playerData: PlayerDataDto = await this.appService.getStorePlayerData(
      ctx,
    );
    let log = `–í—ã –ø–µ—Ä–µ–¥–≤–∏–Ω—É–ª–∏—Å—å ${direction} –Ω–∞ 50m. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ–º–µ–Ω—è–ª–æ—Å—å.\n\n`;
    let enemyList: EnemyObj[] = null;
    if (!ctx.scene.state[playerData.player.telegram_id]?.enemyList?.length) {
      enemyList = this.generateRandomEnemies();
    } else {
      enemyList = ctx.scene.state[playerData.player.telegram_id]?.enemyList;
    }
    enemyList = enemyList.filter((enemy) => enemy.isAlive);
    ctx.scene.state[playerData.player.telegram_id] = {
      ...playerData,
      enemyList,
    };
    log += '–ë—ã–ª–æ:' + this.getEnemiesPositions(enemyList) + '\n';
    if (direction === '‚¨ÜÔ∏è') {
      enemyList.map((item) => {
        item.position.y = item.position.y - 50;
        return item;
      });
    }
    if (direction === '‚¨áÔ∏è') {
      enemyList.map((item) => {
        item.position.y = item.position.y + 50;
        return item;
      });
    }
    if (direction === '‚¨ÖÔ∏è') {
      enemyList.map((item) => {
        item.position.x = item.position.x + 50;
        return item;
      });
    }
    if (direction === '‚û°Ô∏è') {
      enemyList.map((item) => {
        item.position.x = item.position.x - 50;
        return item;
      });
    }
    ctx.scene.state[playerData.player.telegram_id].enemyList = enemyList;
    const keyboard = Markup.inlineKeyboard(
      [
        // Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', 'menu'),
        Markup.button.callback('‚¨ÜÔ∏è50m', 'moveXXX' + '‚¨ÜÔ∏è'),
        Markup.button.callback('‚¨ÖÔ∏è50m', 'moveXXX' + '‚¨ÖÔ∏è'),
        Markup.button.callback('‚¨áÔ∏è50m', 'moveXXX' + '‚¨áÔ∏è'),
        Markup.button.callback('‚û°Ô∏è50m', 'moveXXX' + '‚û°Ô∏è'),
        // –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞—Ç–∞–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        ...ctx.scene.state[playerData.player.telegram_id].enemyList
          .filter((enemy) => enemy.isAlive)
          .map((enemyItem) =>
            Markup.button.callback(
              'üéØ' + enemyItem.name,
              'attackXXX' + enemyItem.name,
            ),
          ),
      ],
      {
        columns: 2,
      },
    ).reply_markup;
    log += '–°—Ç–∞–ª–æ:' + this.getEnemiesPositions(enemyList) + '\n';
    this.appService.updateDisplay(
      playerData.playerProgress,
      keyboard,
      log,
      'https://sun9-2.userapi.com/impg/8D9R-PqX4qIvNk1r7FQ4eP1KfPiWcUJFoN3uRw/B7-a2BJJtC4.jpg?size=700x538&quality=95&sign=becda26a8a3aad44cb19b373ddaa84e8&type=album',
    );
  }

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: TelegrafContext) {
    const playerData: PlayerDataDto = await this.appService.getStorePlayerData(
      ctx,
    );
    let enemyList: EnemyObj[] = null;
    if (!ctx.scene.state[playerData.player.telegram_id]?.enemyList?.length) {
      enemyList = this.generateRandomEnemies();
    } else {
      enemyList = ctx.scene.state[playerData.player.telegram_id]?.enemyList;
    }
    ctx.scene.state[playerData.player.telegram_id] = {
      ...playerData,
      enemyList,
    };
    console.log('awdawdaw', ctx.scene.state[playerData.player.telegram_id]);
    const keyboard = Markup.inlineKeyboard(
      [
        // Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', 'menu'),
        Markup.button.callback('‚¨ÜÔ∏è50m', 'moveXXX' + '‚¨ÜÔ∏è'),
        Markup.button.callback('‚¨ÖÔ∏è50m', 'moveXXX' + '‚¨ÖÔ∏è'),
        Markup.button.callback('‚¨áÔ∏è50m', 'moveXXX' + '‚¨áÔ∏è'),
        Markup.button.callback('‚û°Ô∏è50m', 'moveXXX' + '‚û°Ô∏è'),
        // –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞—Ç–∞–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        ...ctx.scene.state[playerData.player.telegram_id].enemyList
          .filter((enemy) => enemy.isAlive)
          .map((enemyItem) =>
            Markup.button.callback(
              'üéØ' + enemyItem.name,
              'attackXXX' + enemyItem.name,
            ),
          ),
      ],
      {
        columns: 2,
      },
    ).reply_markup;
    let log = `–í–∞–º –Ω–∞ –ø—É—Ç–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –±–∞–Ω–¥–∏—Ç—ã. –ù–∞—á–∞–ª–∞—Å—å –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∞.\n`;
    log += this.getEnemiesPositions(enemyList);

    this.appService.updateDisplay(
      playerData.playerProgress,
      keyboard,
      log,
      'https://sun9-2.userapi.com/impg/8D9R-PqX4qIvNk1r7FQ4eP1KfPiWcUJFoN3uRw/B7-a2BJJtC4.jpg?size=700x538&quality=95&sign=becda26a8a3aad44cb19b373ddaa84e8&type=album',
    );
  }

  getEnemiesPositions(enemyList: EnemyObj[]): string {
    let text = '\n';
    let enemyPosText = '';
    const player: EnemyObj = {
      position: { x: 50, y: 50 },
      name: 'Player',
      health: 150,
      isAlive: true,
    };
    for (let i = 0; i < enemyList.length; i++) {
      const enemy: EnemyObj = enemyList[i];
      const distance = this.calculateDistance(player.position, enemy.position);
      enemyPosText += `${enemy.name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è ${
        player.position.y > enemy.position.y ? '–ø–æ–∑–∞–¥–∏' : '—Å–ø–µ—Ä–µ–¥–∏'
      } ${
        player.position.x > enemy.position.x ? '—Å–ª–µ–≤–∞' : '—Å–ø—Ä–∞–≤–∞'
      } –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ${distance}. `;
      enemyPosText += `–®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è: ${
        80 - this.calculateSpread(1, distance)
      }%. –ú–æ–∂–Ω–æ –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω–∞: ${this.calculateDamage(distance, 50)}\n\n`;
      text += enemyPosText;
      enemyPosText = '';
    }
    return text;
  }

  // ORIGINAL
  // @SceneEnter()
  // async onSceneEnter(@Ctx() ctx: TelegrafContext) {
  //   const playerData: PlayerDataDto = await this.appService.getStorePlayerData(
  //     ctx,
  //   );
  //   const keyboard = Markup.inlineKeyboard([
  //     // Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', 'menu'),
  //     Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', ScenesEnum.SCENE_QUEST),
  //   ]).reply_markup;
  //   const enemies: any[] = this.generateRandomEnemies();
  //   let log = `–í–∞–º –Ω–∞ –ø—É—Ç–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –±–∞–Ω–¥–∏—Ç—ã. –ù–∞—á–∞–ª–∞—Å—å –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∞. –í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –≤—Ä–∞–≥–æ–≤: ${enemies
  //     .map((item) => item.name)
  //     .join(', ')}.\n`;
  //   log += this.battlePart(enemies);
  //   log += '\n–ë–æ–π –æ–∫–æ–Ω—á–µ–Ω!';
  //   this.appService.updateDisplay(
  //     playerData.playerProgress,
  //     keyboard,
  //     log,
  //     'https://sun9-2.userapi.com/impg/8D9R-PqX4qIvNk1r7FQ4eP1KfPiWcUJFoN3uRw/B7-a2BJJtC4.jpg?size=700x538&quality=95&sign=becda26a8a3aad44cb19b373ddaa84e8&type=album',
  //   );
  //   // ctx.scene.leave();
  // }

  // battlePart(enemyList) {
  //   const phrasesShot = [
  //     '–ê–π, –º–ª—è',
  //     '–ú–∞—Å–ª–∏–Ω—É –ø–æ–π–º–∞–ª',
  //     '–ï–ø—Ç–∞',
  //     '–ú–µ–Ω—è –ø–æ–¥–±–∏–ª–∏, –ø–∞—Ü–∞–Ω—ã',
  //     '–ü–æ–≥–∞–Ω–æ —Ç–æ –∫–∞–∫',
  //     '–ó–∞—Ü–µ–ø–∏–ª–æ, –ø–∞—Ü–∞–Ω—ã',
  //   ];
  //   const phrasesMiss = [
  //     '–ú–æ–∑–∏–ª–∞',
  //     '–ö–æ—Å–æ–π',
  //     '–ë–∞–∫–ª–∞–Ω, —Ç—ã –º–∏–º–æ',
  //     '–ê–π, —Ñ–∞—Ä–∞—Ç–Ω—É–ª–æ',
  //     '–í –º–æ–ª–æ–∫–æ',
  //   ];
  //   let logs = '';
  //   let damageToEnemy = 0;
  //   let damageToPlayer = 0;
  //   while (enemyList.length !== 0) {
  //     const enemy = enemyList[0];
  //     const distancePlayers = this.calculateDistance(enemy, { x: 0, y: 0 });
  //     const spread = this.calculateSpread(1, distancePlayers);
  //     logs += `\n–î–∏—Å—Ç–∞–Ω—Ü–∏—è:${distancePlayers}. –†–∞–∑–ª–µ—Ç–Ω–æ—Å—Ç—å: ${spread}%`;
  //     const phrasesIndex = Math.floor(Math.random() * phrasesShot.length);
  //     const phraseShot = phrasesShot[phrasesIndex];
  //     const phrasesMissIndex = Math.floor(Math.random() * phrasesMiss.length);
  //     const phraseMiss = phrasesMiss[phrasesMissIndex];
  //     const damageToEnemyNow = this.calculateDamage(distancePlayers, 120);
  //     const isShotToEnemy = Math.random() * 100 >= spread;
  //     if (isShotToEnemy) {
  //       logs += `\n${enemy.name}: ${phraseShot}\n`;
  //       damageToEnemy += damageToEnemyNow;
  //       logs += `–£—Ä–æ–Ω –ø–æ –≤—Ä–∞–≥—É: ${damageToEnemyNow}\n`;
  //     } else {
  //       logs += `\n${enemy.name}: ${phraseMiss}\n`;
  //       logs += `–£—Ä–æ–Ω –ø–æ –≤—Ä–∞–≥—É –Ω–µ –ø—Ä–æ—à–µ–ª.\n`;
  //     }
  //     const damageToPlayerNow = this.calculateDamage(distancePlayers, 45);
  //     const isShotToPlayer = Math.random() * 100 >= spread;
  //     if (isShotToPlayer) {
  //       damageToPlayer += damageToPlayerNow;
  //       logs += `–û—Ç–≤–µ—Ç–Ω—ã–π —É—Ä–æ–Ω –ø–æ –≤–∞–º: ${damageToPlayerNow}\n`;
  //     } else {
  //       logs += `–û—Ç–≤–µ—Ç–Ω—ã–π —É—Ä–æ–Ω –ø–æ –≤–∞–º –Ω–µ –ø—Ä–æ—à–µ–ª\n`;
  //     }
  //     if (damageToEnemy >= 75) {
  //       enemyList.splice(0, 1);
  //       logs += `${enemy.name} –±–æ–ª–µ–µ –Ω–µ –æ–ø–∞—Å–µ–Ω...\n`;
  //       damageToEnemy = 0;
  //     }
  //     if (damageToPlayer >= 126) {
  //       enemyList.splice(0, 1);
  //       logs += `\n–í—ã –ø–æ–≥–∏–±–ª–∏...(–ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ —ç—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å)\n`;
  //       break;
  //     }
  //   }
  //   return logs;
  // }

  @Action('leave')
  async onLeaveCommand(@Ctx() ctx: TelegrafContext) {
    await ctx.scene.enter(ScenesEnum.SCENE_LOCATION);
  }

  @Action(/^scene.*/gim)
  async enterBanditScene(@Ctx() ctx: Scenes.SceneContext) {
    // @ts-ignore
    const match = ctx.match[0];
    if (match) {
      const scene: ScenesEnum = match;
      await ctx.scene.enter(scene);
    }
    return;
  }
}
